# üìã –¢–ï–•–ù–ò–ß–ï–°–ö–û–ï –ó–ê–î–ê–ù–ò–ï: –°–æ–∑–¥–∞–Ω–∏–µ –∏–≥—Ä –≤ –µ–¥–∏–Ω–æ–º —Å—Ç–∏–ª–µ

## üéØ –û–ë–©–ò–ï –¢–†–ï–ë–û–í–ê–ù–ò–Ø

### –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –ø—Ä–æ–µ–∫—Ç–∞:
```
games/
  –Ω–∞–∑–≤–∞–Ω–∏–µ-–∏–≥—Ä—ã/
    index.html
    style.css  
    game.js
```

### –û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã:
- HUD –ø–∞–Ω–µ–ª–∏ —Å–≤–µ—Ä—Ö—É –∏ —Å–Ω–∏–∑—É
- –ú–æ–¥–∞–ª—å–Ω—ã–µ –æ–∫–Ω–∞ (–≤—ã–±–æ—Ä —Å–ª–æ–∂–Ω–æ—Å—Ç–∏, —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã)
- –ê–¥–∞–ø—Ç–∏–≤–Ω–æ–µ –∏–≥—Ä–æ–≤–æ–µ –ø–æ–ª–µ
- –°–∏—Å—Ç–µ–º–∞ —É—Ä–æ–≤–Ω–µ–π –∏ –æ—á–∫–æ–≤
- –ö–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏

---

## üìÑ HTML –®–ê–ë–õ–û–ù

```html
<!DOCTYPE html>
<html lang="ru">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0, user-scalable=no" />
  <title>–ù–ê–ó–í–ê–ù–ò–ï –ò–ì–†–´</title>
  <link rel="stylesheet" href="../../style.css" />
  <link rel="stylesheet" href="style.css" />
</head>
<body>
  <!-- HUD Top (–ø–æ–≤—ë—Ä–Ω—É—Ç –Ω–∞ 180¬∞) -->
  <header class="hud hud-top">
    <div class="hud-row hud-rotated">
      <button class="btn btn-ghost" id="btnBackTop">‚Üê –ú–µ–Ω—é</button>
      <div class="hud-center">
        <div class="turn-label"><span id="turnLabelTop">üéÆ –ù–ê–ó–í–ê–ù–ò–ï –ò–ì–†–´</span></div>
      </div>
      <div class="score" id="scoreTop">–£—Ä–æ–≤–µ–Ω—å: 1</div>
      <button class="btn" id="btnNewTop">–ù–æ–≤–∞—è –ø–∞—Ä—Ç–∏—è ‚Üª</button>
      <button class="hud-check-btn" id="hudCheckTop" style="display: none;">–ü—Ä–æ–≤–µ—Ä–∏—Ç—å</button>
    </div>
  </header>

  <!-- –ò–≥—Ä–æ–≤–æ–µ –ø–æ–ª–µ -->
  <main class="game-container">
    <div id="stage">
      <!-- –ò–≥—Ä–æ–≤—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã —Å–æ–∑–¥–∞—é—Ç—Å—è –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏ -->
    </div>
  </main>

  <!-- HUD Bottom -->
  <footer class="hud hud-bottom">
    <div class="hud-row">
      <button class="btn btn-ghost" id="btnBackBottom">‚Üê –ú–µ–Ω—é</button>
      <div class="hud-center">
        <div class="turn-label"><span id="turnLabelBottom">üéÆ –ù–ê–ó–í–ê–ù–ò–ï –ò–ì–†–´</span></div>
      </div>
      <div class="score" id="scoreBottom">–£—Ä–æ–≤–µ–Ω—å: 1</div>
      <button class="btn" id="btnNewBottom">–ù–æ–≤–∞—è –ø–∞—Ä—Ç–∏—è ‚Üª</button>
      <button class="hud-check-btn" id="hudCheckBottom" style="display: none;">–ü—Ä–æ–≤–µ—Ä–∏—Ç—å</button>
    </div>
  </footer>

  <!-- –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –≤—ã–±–æ—Ä–∞ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ -->
  <div id="difficultyModal" class="modal-backdrop" style="display: flex;">
    <div class="modal">
      <div class="modal-title">üéÆ –ù–ê–ó–í–ê–ù–ò–ï –ò–ì–†–´</div>
      <div class="modal-subtitle">–í—ã–±–µ—Ä–∏—Ç–µ —É—Ä–æ–≤–µ–Ω—å —Å–ª–æ–∂–Ω–æ—Å—Ç–∏</div>
      <div class="difficulty-options">
        <button class="difficulty-option" data-level="2">–õ—ë–≥–∫–∏–π (2)</button>
        <button class="difficulty-option" data-level="4">–°—Ä–µ–¥–Ω–∏–π (4)</button>
        <button class="difficulty-option" data-level="6">–í—ã—Å–æ–∫–∏–π (6)</button>
        <button class="difficulty-option" data-level="8">–≠–∫—Å—Ç—Ä–∞ (8)</button>
        <button class="difficulty-option" data-level="10">–í–∞—Å—Å–µ—Ä–º–∞–Ω (10)</button>
      </div>
    </div>
  </div>

  <!-- –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ -->
  <div id="modalBackdrop" class="modal-backdrop" hidden style="display: none !important;">
    <div class="modal">
      <h2 class="modal-title" id="modalTitle">–ò–≥—Ä–∞ –æ–∫–æ–Ω—á–µ–Ω–∞!</h2>
      <p class="modal-subtitle" id="modalSubtitle">–§–∏–Ω–∞–ª—å–Ω—ã–π —Å—á—ë—Ç: 0</p>
      <div class="modal-actions">
        <button class="btn" id="btnRematch">–ù–æ–≤–∞—è –ø–∞—Ä—Ç–∏—è</button>
        <button class="btn btn-ghost" id="btnToMenu">–í –º–µ–Ω—é</button>
      </div>
    </div>
  </div>

  <script src="game.js"></script>
</body>
</html>
```

---

## üé® CSS –®–ê–ë–õ–û–ù

```css
/* –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫–æ—Ä–Ω–µ–≤—ã—Ö —Å—Ç–∏–ª–µ–π */
@import url('../../style.css');

/* –ò–≥—Ä–æ–≤–æ–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä */
.game-container {
  display: flex;
  align-items: center;
  justify-content: center;
  min-height: 100vh;
  padding: 80px 16px;
  background: var(--background);
}

/* –ò–≥—Ä–æ–≤–æ–µ –ø–æ–ª–µ */
.game-field {
  display: grid;
  grid-template-columns: repeat(5, 1fr);
  grid-template-rows: repeat(5, 1fr);
  gap: 8px;
  width: calc(100vw - 32px);
  height: calc(100vh - 200px);
  max-width: calc(100vh - 200px);
  max-height: calc(100vh - 200px);
  border-radius: 20px;
  background: var(--card);
  border: 1px solid var(--line);
  box-shadow: var(--shadow);
  padding: 12px;
  margin: 0 auto;
}

/* –ö–ª–µ—Ç–∫–∏ –ø–æ–ª—è */
.field-cell {
  position: relative;
  background: var(--neutral-color);
  border: 3px solid var(--line);
  border-radius: 12px;
  cursor: pointer;
  transition: all 0.2s ease;
  display: flex;
  align-items: center;
  justify-content: center;
  font-weight: 600;
  color: var(--text);
  box-shadow: 0 2px 4px rgba(0,0,0,0.1);
}

.field-cell:hover {
  box-shadow: 0 8px 18px rgba(15,23,42,.08);
  transform: scale(1.02);
}

.field-cell:active {
  transform: scale(0.95);
  transition: transform 0.1s ease;
}

.field-cell.selected {
  border-color: var(--accent);
  border-width: 4px;
  box-shadow: 0 0 0 4px rgba(255,106,0,.3), 0 4px 12px rgba(255,106,0,.2);
  animation: pulse 0.6s ease-in-out;
  background: rgba(255,106,0,0.1);
}

/* HUD –∫–Ω–æ–ø–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ */
.hud-check-btn {
  appearance: none;
  border: 1px solid var(--accent);
  background: var(--accent);
  color: #fff;
  padding: 8px 16px;
  border-radius: 8px;
  font-weight: 600;
  cursor: pointer;
  transition: all .2s ease;
  font-size: clamp(12px, 1.5vw, 16px);
}

.hud-check-btn:hover {
  background: var(--accent-hover);
  transform: translateY(-1px);
}

.hud-check-btn:disabled {
  opacity: 0.5;
  cursor: not-allowed;
  transform: none;
}

/* –ê–Ω–∏–º–∞—Ü–∏–∏ */
@keyframes pulse {
  0%, 100% { transform: scale(1); }
  50% { transform: scale(1.05); }
}
```

---

## ‚öôÔ∏è JAVASCRIPT –®–ê–ë–õ–û–ù

```javascript
// –ù–ê–ó–í–ê–ù–ò–ï –ò–ì–†–´ - –ø–æ–ª–Ω–æ—ç–∫—Ä–∞–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è
(() => {
  // –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø –ò–ì–†–´
  const GAME_CONFIG = {
    name: '–ù–ê–ó–í–ê–ù–ò–ï –ò–ì–†–´',
    icon: 'üéÆ',
    colors: [
      { name: 'red', value: '#FE112E', display: '–ö—Ä–∞—Å–Ω—ã–π' },
      { name: 'blue', value: '#1E6FE3', display: '–°–∏–Ω–∏–π' },
      { name: 'green', value: '#2ED573', display: '–ó–µ–ª—ë–Ω—ã–π' },
      { name: 'yellow', value: '#FFE23F', display: '–ñ—ë–ª—Ç—ã–π' },
      { name: 'cyan', value: '#17A2B8', display: '–ì–æ–ª—É–±–æ–π' },
      { name: 'purple', value: '#A55EEA', display: '–§–∏–æ–ª–µ—Ç–æ–≤—ã–π' },
      { name: 'orange', value: '#FE7800', display: '–û—Ä–∞–Ω–∂–µ–≤—ã–π' }
    ],
    difficulties: [
      { level: 2, name: '–õ—ë–≥–∫–∏–π', count: 2 },
      { level: 4, name: '–°—Ä–µ–¥–Ω–∏–π', count: 4 },
      { level: 6, name: '–í—ã—Å–æ–∫–∏–π', count: 6 },
      { level: 8, name: '–≠–∫—Å—Ç—Ä–∞', count: 8 },
      { level: 10, name: '–í–∞—Å—Å–µ—Ä–º–∞–Ω', count: 10 }
    ]
  };

  // –°–û–°–¢–û–Ø–ù–ò–ï –ò–ì–†–´
  const gameState = {
    currentDifficulty: 2,
    score: 0,
    level: 1,
    isPlaying: false,
    gamePhase: 'selecting', // 'selecting', 'playing', 'checking', 'finished'
    isWin: false,
    // –î–û–ë–ê–í–ò–¢–¨ –°–ü–ï–¶–ò–§–ò–ß–ù–´–ï –î–õ–Ø –ò–ì–†–´ –ü–û–õ–Ø
  };

  // DOM –≠–õ–ï–ú–ï–ù–¢–´
  let stage, gameField;
  let hudCheckTop, hudCheckBottom;

  // –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø
  function initGame() {
    stage = document.getElementById('stage');
    if (!stage) return;
    
    createGameInterface();
    updateDisplay();
    bindEvents();
    showDifficultyModal();
  }

  // –°–û–ó–î–ê–ù–ò–ï –ò–ù–¢–ï–†–§–ï–ô–°–ê
  function createGameInterface() {
    stage.innerHTML = `
      <div class="game-field" id="gameField" style="display: none;">
        <!-- –ò–ì–†–û–í–´–ï –≠–õ–ï–ú–ï–ù–¢–´ –°–û–ó–î–ê–Æ–¢–°–Ø –î–ò–ù–ê–ú–ò–ß–ï–°–ö–ò -->
      </div>
    `;
    
    gameField = document.getElementById('gameField');
    hudCheckTop = document.getElementById('hudCheckTop');
    hudCheckBottom = document.getElementById('hudCheckBottom');
  }

  // –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò
  function updateDisplay() {
    const scoreTop = document.getElementById('scoreTop');
    const scoreBottom = document.getElementById('scoreBottom');
    if (scoreTop) scoreTop.textContent = `–£—Ä–æ–≤–µ–Ω—å: ${gameState.level}`;
    if (scoreBottom) scoreBottom.textContent = `–£—Ä–æ–≤–µ–Ω—å: ${gameState.level}`;
    
    if (!gameState.isPlaying) {
      const turnLabelTop = document.getElementById('turnLabelTop');
      const turnLabelBottom = document.getElementById('turnLabelBottom');
      if (turnLabelTop) turnLabelTop.textContent = `${GAME_CONFIG.icon} ${GAME_CONFIG.name}`;
      if (turnLabelBottom) turnLabelBottom.textContent = `${GAME_CONFIG.icon} ${GAME_CONFIG.name}`;
    }
  }

  function updateHUDInfo(text) {
    const turnLabelTop = document.getElementById('turnLabelTop');
    const turnLabelBottom = document.getElementById('turnLabelBottom');
    if (turnLabelTop) turnLabelTop.textContent = text;
    if (turnLabelBottom) turnLabelBottom.textContent = text;
  }

  function showHUDCheckButton() {
    if (hudCheckTop) hudCheckTop.style.display = 'block';
    if (hudCheckBottom) hudCheckBottom.style.display = 'block';
  }

  function hideHUDCheckButton() {
    if (hudCheckTop) hudCheckTop.style.display = 'none';
    if (hudCheckBottom) hudCheckBottom.style.display = 'none';
  }

  function resetGame() {
    gameState.score = 0;
    gameState.level = 1;
    gameState.isPlaying = false;
    gameState.gamePhase = 'selecting';
    gameState.isWin = false;
    
    const modalBackdrop = document.getElementById('modalBackdrop');
    if (modalBackdrop) modalBackdrop.hidden = true;
    
    if (gameField) gameField.style.display = 'none';
    hideHUDCheckButton();
    
    showDifficultyModal();
    updateDisplay();
  }

  // –ú–û–î–ê–õ–¨–ù–´–ï –û–ö–ù–ê
  function showDifficultyModal() {
    const modalBackdrop = document.getElementById('modalBackdrop');
    if (modalBackdrop) modalBackdrop.hidden = true;
    
    const difficultyModal = document.getElementById('difficultyModal');
    if (difficultyModal) difficultyModal.style.display = 'flex';
  }

  function hideDifficultyModal() {
    const difficultyModal = document.getElementById('difficultyModal');
    if (difficultyModal) difficultyModal.style.display = 'none';
  }

  function showEndModal() {
    const modalBackdrop = document.getElementById('modalBackdrop');
    const modalTitle = document.getElementById('modalTitle');
    const modalSubtitle = document.getElementById('modalSubtitle');
    
    if (modalBackdrop && modalTitle && modalSubtitle) {
      modalTitle.textContent = '–ò–≥—Ä–∞ –æ–∫–æ–Ω—á–µ–Ω–∞!';
      modalSubtitle.textContent = `–§–∏–Ω–∞–ª—å–Ω—ã–π —Å—á—ë—Ç: ${gameState.score} –æ—á–∫–æ–≤, –ø—Ä–æ–π–¥–µ–Ω–æ ${gameState.level - 1} —É—Ä–æ–≤–Ω–µ–π`;
      modalBackdrop.hidden = false;
    }
  }

  // –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –°–û–ë–´–¢–ò–ô
  function bindEvents() {
    // –í—ã–±–æ—Ä —Å–ª–æ–∂–Ω–æ—Å—Ç–∏
    const difficultyOptions = document.querySelectorAll('.difficulty-option');
    difficultyOptions.forEach(option => {
      option.addEventListener('click', (e) => {
        const level = parseInt(e.currentTarget.dataset.level);
        gameState.currentDifficulty = level;
        hideDifficultyModal();
        startGame();
      });
    });

    // –ö–Ω–æ–ø–∫–∏ HUD
    const btnNewTop = document.getElementById('btnNewTop');
    const btnNewBottom = document.getElementById('btnNewBottom');
    const btnBackTop = document.getElementById('btnBackTop');
    const btnBackBottom = document.getElementById('btnBackBottom');
    const btnRematch = document.getElementById('btnRematch');
    const btnToMenu = document.getElementById('btnToMenu');
    
    if (btnNewTop) btnNewTop.addEventListener('click', resetGame);
    if (btnNewBottom) btnNewBottom.addEventListener('click', resetGame);
    if (btnBackTop) btnBackTop.addEventListener('click', () => window.location.href = '../../index.html');
    if (btnBackBottom) btnBackBottom.addEventListener('click', () => window.location.href = '../../index.html');
    if (btnRematch) btnRematch.addEventListener('click', () => {
      const modalBackdrop = document.getElementById('modalBackdrop');
      if (modalBackdrop) modalBackdrop.hidden = true;
      if (gameState.isWin) {
        nextLevel();
      } else {
        resetGame();
      }
    });
    if (btnToMenu) btnToMenu.addEventListener('click', () => window.location.href = '../../index.html');

    // –ö–Ω–æ–ø–∫–∏ –ø—Ä–æ–≤–µ—Ä–∫–∏
    if (hudCheckTop) hudCheckTop.addEventListener('click', checkResult);
    if (hudCheckBottom) hudCheckBottom.addEventListener('click', checkResult);
  }

  // –ê–õ–ì–û–†–ò–¢–ú –ò–ì–†–´ (–ò–ó–ú–ï–ù–ò–¢–¨ –ü–û–î –ö–û–ù–ö–†–ï–¢–ù–£–Æ –ò–ì–†–£)
  function startGame() {
    gameState.isPlaying = true;
    gameState.gamePhase = 'playing';
    // –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø –ò–ì–†–û–í–´–• –î–ê–ù–ù–´–•
    updateDisplay();
    showGameInstructions();
  }

  function showGameInstructions() {
    updateHUDInfo('–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –¥–ª—è –∏–≥—Ä–æ–∫–∞');
    setTimeout(() => {
      startGameplay();
    }, 2000);
  }

  function startGameplay() {
    updateHUDInfo('–ò–≥—Ä–∞–π—Ç–µ!');
    createGameField();
    enableFieldInteraction();
    updateSelectionStatus();
  }

  function checkResult() {
    gameState.gamePhase = 'checking';
    updateHUDInfo('–ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç...');
    
    const result = calculateResult();
    
    if (result.isPerfect) {
      gameState.score += gameState.currentDifficulty * 10;
      gameState.level++;
      gameState.isWin = true;
      
      updateHUDInfo('–û—Ç–ª–∏—á–Ω–æ! –í—Å–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ!');
      
      setTimeout(() => {
        nextLevel();
      }, 2000);
    } else {
      gameState.isWin = false;
      updateHUDInfo(`–†–µ–∑—É–ª—å—Ç–∞—Ç: ${result.correct}/${result.total}`);
      
      setTimeout(() => {
        endGame();
      }, 3000);
    }
    
    hideHUDCheckButton();
    updateDisplay();
  }

  function nextLevel() {
    // –°–ë–†–û–° –ò–ì–†–û–í–´–• –î–ê–ù–ù–´–•
    if (gameField) gameField.style.display = 'none';
    
    // –£–í–ï–õ–ò–ß–ï–ù–ò–ï –°–õ–û–ñ–ù–û–°–¢–ò
    if (gameState.level % 3 === 0 && gameState.currentDifficulty < 10) {
      gameState.currentDifficulty = Math.min(10, gameState.currentDifficulty + 2);
    }
    
    updateDisplay();
    startGame();
  }

  function endGame() {
    gameState.isPlaying = false;
    gameState.gamePhase = 'finished';
    
    hideHUDCheckButton();
    updateHUDInfo('–î–∞–≤–∞–π —Å—ã–≥—Ä–∞–µ–º –µ—â–µ?');
    showEndModal();
  }

  // –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò
  function sleep(ms) {
    return new Promise(resolve => setTimeout(resolve, ms));
  }

  // –ó–ê–ü–£–°–ö –ò–ì–†–´
  document.addEventListener('DOMContentLoaded', initGame);
  
  // –ì–õ–û–ë–ê–õ–¨–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø –î–õ–Ø –ù–ê–í–ò–ì–ê–¶–ò–ò
  window.goToMenu = () => {
    window.location.href = '../../index.html';
  };
})();
```

---

## üìù –ß–ï–ö–õ–ò–°–¢ –î–õ–Ø –ù–û–í–û–ô –ò–ì–†–´

### –û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è:
- [ ] –ó–∞–º–µ–Ω–∏—Ç—å "–ù–ê–ó–í–ê–ù–ò–ï –ò–ì–†–´" –Ω–∞ —Ä–µ–∞–ª—å–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ
- [ ] –ó–∞–º–µ–Ω–∏—Ç—å "üéÆ" –Ω–∞ –ø–æ–¥—Ö–æ–¥—è—â—É—é –∏–∫–æ–Ω–∫—É
- [ ] –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å —Ñ—É–Ω–∫—Ü–∏–∏: `createGameField()`, `enableFieldInteraction()`, `updateSelectionStatus()`, `calculateResult()`
- [ ] –î–æ–±–∞–≤–∏—Ç—å —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –ø–æ–ª—è –≤ `gameState`
- [ ] –ù–∞—Å—Ç—Ä–æ–∏—Ç—å –ª–æ–≥–∏–∫—É –≥–µ–π–º–ø–ª–µ—è –≤ `startGame()`, `showGameInstructions()`, `startGameplay()`

### –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è:
- [ ] –ò–∑–º–µ–Ω–∏—Ç—å —Ä–∞–∑–º–µ—Ä –∏–≥—Ä–æ–≤–æ–≥–æ –ø–æ–ª—è (–µ—Å–ª–∏ –Ω–µ 5√ó5)
- [ ] –î–æ–±–∞–≤–∏—Ç—å —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –∞–Ω–∏–º–∞—Ü–∏–∏
- [ ] –ù–∞—Å—Ç—Ä–æ–∏—Ç—å —Ü–≤–µ—Ç–∞ –∏ —Å—Ç–∏–ª–∏ –ø–æ–¥ –∏–≥—Ä—É
- [ ] –î–æ–±–∞–≤–∏—Ç—å –∑–≤—É–∫–æ–≤—ã–µ —ç—Ñ—Ñ–µ–∫—Ç—ã

### –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ:
- [ ] –í—Å–µ –∫–Ω–æ–ø–∫–∏ HUD —Ä–∞–±–æ—Ç–∞—é—Ç
- [ ] –ü–µ—Ä–µ—Ö–æ–¥—ã –º–µ–∂–¥—É —É—Ä–æ–≤–Ω—è–º–∏
- [ ] –ú–æ–¥–∞–ª—å–Ω—ã–µ –æ–∫–Ω–∞
- [ ] –ê–¥–∞–ø—Ç–∏–≤–Ω–æ—Å—Ç—å
- [ ] –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å

---

**–¢–µ–ø–µ—Ä—å –ø—Ä–æ—Å—Ç–æ –∫–æ–ø–∏—Ä—É–π—Ç–µ —ç—Ç–æ—Ç —à–∞–±–ª–æ–Ω –∏ –º–µ–Ω—è–π—Ç–µ —Ç–æ–ª—å–∫–æ –∞–ª–≥–æ—Ä–∏—Ç–º –∏–≥—Ä—ã!** üöÄ


