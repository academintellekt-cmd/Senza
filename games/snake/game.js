// –ó–ú–ï–ô–ö–ê - –ø–æ–ª–Ω–æ—ç–∫—Ä–∞–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è
(() => {
  // –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø –ò–ì–†–´
  const GAME_CONFIG = {
    name: '–ó–º–µ–π–∫–∞',
    icon: 'üêç',
    colors: [
      { name: 'red', value: '#FE112E', display: '–ö—Ä–∞—Å–Ω—ã–π' },
      { name: 'green', value: '#2ED573', display: '–ó–µ–ª—ë–Ω—ã–π' },
      { name: 'yellow', value: '#FFE23F', display: '–ñ—ë–ª—Ç—ã–π' },
      { name: 'blue', value: '#1E6FE3', display: '–°–∏–Ω–∏–π' }
    ],
    fieldTypes: [
      { type: 'empty', name: '–ü—É—Å—Ç–æ–µ –ø–æ–ª–µ (—Ç–µ–ª–µ–ø–æ—Ä—Ç)' },
      { type: 'bordered', name: '–° —Ä–∞–º–∫–æ–π' },
      { type: 'donut', name: '–ü–æ–ª–µ-–±—É–±–ª–∏–∫' }
    ],
    directions: {
      UP: { x: 0, y: -1 },
      DOWN: { x: 0, y: 1 },
      LEFT: { x: -1, y: 0 },
      RIGHT: { x: 1, y: 0 }
    }
  };

  // –°–û–°–¢–û–Ø–ù–ò–ï –ò–ì–†–´
  const gameState = {
    currentPlayers: 2,
    currentField: 'empty',
    speed: 1,
    isPlaying: false,
    gamePhase: 'selecting',
    isWin: false,
    gameLoop: null,
    speedIncreaseTimer: 0,
    field: null,
    snakes: [],
    food: [], // –ú–∞—Å—Å–∏–≤ –µ–¥—ã –≤–º–µ—Å—Ç–æ –æ–¥–Ω–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞
    gameStartTime: 0,
    foodSpawnTimer: 0,
    maxFood: 5 // –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –µ–¥—ã –Ω–∞ –ø–æ–ª–µ
  };

  // DOM –≠–õ–ï–ú–ï–ù–¢–´
  let stage, gameField, controlsPanel;

  // –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø
  function initGame() {
    console.log('–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏–≥—Ä—ã –∑–º–µ–π–∫–∞');
    stage = document.getElementById('stage');
    if (!stage) {
      console.error('–≠–ª–µ–º–µ–Ω—Ç stage –Ω–µ –Ω–∞–π–¥–µ–Ω!');
      return;
    }
    
    createGameInterface();
    updateDisplay();
    bindEvents();
    showDifficultyModal();
    console.log('–ò–≥—Ä–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞');
  }

  // –°–û–ó–î–ê–ù–ò–ï –ò–ù–¢–ï–†–§–ï–ô–°–ê
  function createGameInterface() {
    stage.innerHTML = `
      <div class="game-field" id="gameField" style="display: none;">
        <!-- –ò–ì–†–û–í–´–ï –≠–õ–ï–ú–ï–ù–¢–´ –°–û–ó–î–ê–Æ–¢–°–Ø –î–ò–ù–ê–ú–ò–ß–ï–°–ö–ò -->
      </div>
      <div class="controls-panel" id="controlsPanel" style="display: none;">
        <!-- –ü–ê–ù–ï–õ–¨ –£–ü–†–ê–í–õ–ï–ù–ò–Ø –°–û–ó–î–ê–ï–¢–°–Ø –î–ò–ù–ê–ú–ò–ß–ï–°–ö–ò -->
      </div>
    `;
    
    gameField = document.getElementById('gameField');
    controlsPanel = document.getElementById('controlsPanel');
  }

  // –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò
  function updateDisplay() {
    const scoreTop = document.getElementById('scoreTop');
    const scoreBottom = document.getElementById('scoreBottom');
    if (scoreTop) scoreTop.textContent = `–°–∫–æ—Ä–æ—Å—Ç—å: ${gameState.speed}`;
    if (scoreBottom) scoreBottom.textContent = `–°–∫–æ—Ä–æ—Å—Ç—å: ${gameState.speed}`;
    
    if (!gameState.isPlaying) {
      const turnLabelTop = document.getElementById('turnLabelTop');
      const turnLabelBottom = document.getElementById('turnLabelBottom');
      if (turnLabelTop) turnLabelTop.textContent = `${GAME_CONFIG.icon} ${GAME_CONFIG.name}`;
      if (turnLabelBottom) turnLabelBottom.textContent = `${GAME_CONFIG.icon} ${GAME_CONFIG.name}`;
    }
  }

  function updateHUDInfo(text) {
    const turnLabelTop = document.getElementById('turnLabelTop');
    const turnLabelBottom = document.getElementById('turnLabelBottom');
    if (turnLabelTop) turnLabelTop.textContent = text;
    if (turnLabelBottom) turnLabelBottom.textContent = text;
  }

  function showHUDCheckButton() {
    // –ù–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ –∑–º–µ–π–∫–µ
  }

  function hideHUDCheckButton() {
    // –ù–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ –∑–º–µ–π–∫–µ
  }

  function resetGame() {
    gameState.speed = 1;
    gameState.isPlaying = false;
    gameState.gamePhase = 'selecting';
    gameState.isWin = false;
    gameState.speedIncreaseTimer = 0;
    gameState.foodSpawnTimer = 0;
    gameState.snakes = [];
    gameState.food = [];
    
    if (gameState.gameLoop) {
      clearInterval(gameState.gameLoop);
      gameState.gameLoop = null;
    }
    
    const modalBackdrop = document.getElementById('modalBackdrop');
    if (modalBackdrop) modalBackdrop.hidden = true;
    
    if (gameField) gameField.style.display = 'none';
    if (controlsPanel) controlsPanel.style.display = 'none';
    
    showDifficultyModal();
    updateDisplay();
  }

  // –ú–û–î–ê–õ–¨–ù–´–ï –û–ö–ù–ê
  function showDifficultyModal() {
    console.log('–ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –Ω–∞—Å—Ç—Ä–æ–µ–∫');
    const modalBackdrop = document.getElementById('modalBackdrop');
    if (modalBackdrop) modalBackdrop.hidden = true;
    
    const difficultyModal = document.getElementById('difficultyModal');
    if (difficultyModal) {
      difficultyModal.style.display = 'flex';
      console.log('–ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –ø–æ–∫–∞–∑–∞–Ω–æ');
    } else {
      console.error('–ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ!');
    }
  }

  function hideDifficultyModal() {
    const difficultyModal = document.getElementById('difficultyModal');
    if (difficultyModal) difficultyModal.style.display = 'none';
  }

  function showEndModal() {
    const modalBackdrop = document.getElementById('modalBackdrop');
    const modalTitle = document.getElementById('modalTitle');
    const modalSubtitle = document.getElementById('modalSubtitle');
    
    if (modalBackdrop && modalTitle && modalSubtitle) {
      const aliveSnakes = gameState.snakes.filter(snake => snake.alive);
      const longestSnake = gameState.snakes.reduce((longest, snake) => 
        snake.segments.length > longest.segments.length ? snake : longest
      );
      
      modalTitle.textContent = '–ò–≥—Ä–∞ –æ–∫–æ–Ω—á–µ–Ω–∞!';
      
      if (gameState.currentPlayers === 1) {
        if (aliveSnakes.length === 0) {
          modalSubtitle.innerHTML = `
            <div>–ò–≥—Ä–∞ –æ–∫–æ–Ω—á–µ–Ω–∞! –ó–º–µ—è –ø–æ–≥–∏–±–ª–∞.</div>
            <div>–î–ª–∏–Ω–∞ –∑–º–µ–∏: <span style="color: ${longestSnake.color}">${longestSnake.segments.length}</span> —Å–µ–≥–º–µ–Ω—Ç–æ–≤</div>
          `;
        } else {
          modalSubtitle.innerHTML = `
            <div>–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã –≤—ã–∂–∏–ª–∏!</div>
            <div>–î–ª–∏–Ω–∞ –∑–º–µ–∏: <span style="color: ${longestSnake.color}">${longestSnake.segments.length}</span> —Å–µ–≥–º–µ–Ω—Ç–æ–≤</div>
          `;
        }
      } else {
        const winner = aliveSnakes[0];
        modalSubtitle.innerHTML = `
          <div>–ü–æ–±–µ–¥–∏—Ç–µ–ª—å: <span style="color: ${winner.color}">${winner.colorName}</span></div>
          <div>–°–∞–º–∞—è –¥–ª–∏–Ω–Ω–∞—è –∑–º–µ—è: <span style="color: ${longestSnake.color}">${longestSnake.colorName}</span> (${longestSnake.segments.length} —Å–µ–≥–º–µ–Ω—Ç–æ–≤)</div>
        `;
      }
      
      modalBackdrop.hidden = false;
    }
  }

  // –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –°–û–ë–´–¢–ò–ô
  function bindEvents() {
    // –í—ã–±–æ—Ä –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∏–≥—Ä–æ–∫–æ–≤
    const playerOptions = document.querySelectorAll('.player-option');
    playerOptions.forEach(option => {
      option.addEventListener('click', (e) => {
        playerOptions.forEach(opt => opt.classList.remove('selected'));
        e.currentTarget.classList.add('selected');
        gameState.currentPlayers = parseInt(e.currentTarget.dataset.players);
        updateStartButton();
      });
    });

    // –í—ã–±–æ—Ä —Ç–∏–ø–∞ –ø–æ–ª—è
    const fieldOptions = document.querySelectorAll('.field-option');
    fieldOptions.forEach(option => {
      option.addEventListener('click', (e) => {
        fieldOptions.forEach(opt => opt.classList.remove('selected'));
        e.currentTarget.classList.add('selected');
        gameState.currentField = e.currentTarget.dataset.field;
        updateStartButton();
      });
    });

    // –ö–Ω–æ–ø–∫–∞ –Ω–∞—á–∞–ª–∞ –∏–≥—Ä—ã
    const startGameBtn = document.getElementById('startGameBtn');
    if (startGameBtn) {
      startGameBtn.addEventListener('click', () => {
        hideDifficultyModal();
        startGame();
      });
    }

    // –ö–Ω–æ–ø–∫–∏ HUD
    const btnNewTop = document.getElementById('btnNewTop');
    const btnNewBottom = document.getElementById('btnNewBottom');
    const btnBackTop = document.getElementById('btnBackTop');
    const btnBackBottom = document.getElementById('btnBackBottom');
    const btnRematch = document.getElementById('btnRematch');
    const btnToMenu = document.getElementById('btnToMenu');
    
    if (btnNewTop) btnNewTop.addEventListener('click', resetGame);
    if (btnNewBottom) btnNewBottom.addEventListener('click', resetGame);
    if (btnBackTop) btnBackTop.addEventListener('click', () => window.location.href = '../index.html');
    if (btnBackBottom) btnBackBottom.addEventListener('click', () => window.location.href = '../index.html');
    if (btnRematch) btnRematch.addEventListener('click', () => {
      const modalBackdrop = document.getElementById('modalBackdrop');
      if (modalBackdrop) modalBackdrop.hidden = true;
      resetGame();
    });
    if (btnToMenu) btnToMenu.addEventListener('click', () => window.location.href = '../index.html');

    // –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞
    document.addEventListener('keydown', handleKeyPress);
  }

  function updateStartButton() {
    const startBtn = document.getElementById('startGameBtn');
    const playersSelected = document.querySelector('.player-option.selected');
    const fieldSelected = document.querySelector('.field-option.selected');
    
    if (startBtn && playersSelected && fieldSelected) {
      startBtn.disabled = false;
    }
  }

  // –ê–õ–ì–û–†–ò–¢–ú –ò–ì–†–´
  function startGame() {
    console.log('–ù–∞—á–∏–Ω–∞–µ–º –∏–≥—Ä—É!');
    gameState.isPlaying = true;
    gameState.gamePhase = 'playing';
    gameState.gameStartTime = Date.now();
    gameState.speedIncreaseTimer = 0;
    
    createGameField();
    createSnakes();
    createFood();
    createControls();
    
    // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∑–º–µ–π
    updateSnakesDisplay();
    
    // –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∑–º–µ–π –∏ –µ–¥—ã
    setTimeout(() => {
      console.log('–¢–µ—Å—Ç–∏—Ä—É–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∑–º–µ–π –∏ –µ–¥—ã —á–µ—Ä–µ–∑ 1 —Å–µ–∫—É–Ω–¥—É...');
      updateSnakesDisplay();
      updateFoodDisplay();
    }, 1000);
    
    updateDisplay();
    updateHUDInfo('–ò–≥—Ä–∞–π—Ç–µ!');
    startGameLoop();
  }

  function createGameField() {
    if (gameField) {
      console.log('–°–æ–∑–¥–∞–µ–º –∏–≥—Ä–æ–≤–æ–µ –ø–æ–ª–µ 20x20');
      gameField.style.display = 'grid';
      gameField.style.gridTemplateColumns = 'repeat(20, 1fr)';
      gameField.style.gridTemplateRows = 'repeat(20, 1fr)';
      gameField.style.gap = '2px';
      gameField.innerHTML = '';
      
      // –°–æ–∑–¥–∞–µ–º —Å–µ—Ç–∫—É 20x20
      for (let y = 0; y < 20; y++) {
        for (let x = 0; x < 20; x++) {
          const cell = document.createElement('div');
          cell.className = 'field-cell';
          cell.dataset.x = x;
          cell.dataset.y = y;
          cell.id = `cell-${x}-${y}`;
          gameField.appendChild(cell);
        }
      }
      
      console.log(`–°–æ–∑–¥–∞–Ω–æ ${gameField.children.length} —è—á–µ–µ–∫`);
      
      // –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–µ–Ω—ã –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –ø–æ–ª—è
      addWalls();
    } else {
      console.error('gameField –Ω–µ –Ω–∞–π–¥–µ–Ω!');
    }
  }

  function addWalls() {
    if (gameState.currentField === 'bordered' || gameState.currentField === 'donut') {
      // –†–∞–º–∫–∞ –ø–æ –ø–µ—Ä–∏–º–µ—Ç—Ä—É
      for (let x = 0; x < 20; x++) {
        addWall(x, 0);
        addWall(x, 19);
      }
      for (let y = 0; y < 20; y++) {
        addWall(0, y);
        addWall(19, y);
      }
    }
    
    if (gameState.currentField === 'donut') {
      // –°—Ç–µ–Ω–∫–∞ –ø–æ—Å–µ—Ä–µ–¥–∏–Ω–µ (–±—É–±–ª–∏–∫)
      for (let x = 8; x <= 11; x++) {
        for (let y = 8; y <= 11; y++) {
          addWall(x, y);
        }
      }
    }
  }

  function addWall(x, y) {
    const cell = document.getElementById(`cell-${x}-${y}`);
    if (cell) {
      cell.classList.add('wall');
    }
  }

  function createSnakes() {
    console.log('–°–æ–∑–¥–∞–µ–º –∑–º–µ–π –¥–ª—è', gameState.currentPlayers, '–∏–≥—Ä–æ–∫–æ–≤');
    gameState.snakes = [];
    const startPositions = [
      { x: 10, y: 10, direction: GAME_CONFIG.directions.RIGHT }, // –¶–µ–Ω—Ç—Ä –¥–ª—è 1 –∏–≥—Ä–æ–∫–∞
      { x: 2, y: 2, direction: GAME_CONFIG.directions.RIGHT },   // –õ–µ–≤—ã–π –≤–µ—Ä—Ö –¥–ª—è 2 –∏–≥—Ä–æ–∫–æ–≤
      { x: 17, y: 2, direction: GAME_CONFIG.directions.LEFT },   // –ü—Ä–∞–≤—ã–π –≤–µ—Ä—Ö –¥–ª—è 2 –∏–≥—Ä–æ–∫–æ–≤
      { x: 2, y: 17, direction: GAME_CONFIG.directions.RIGHT },  // –õ–µ–≤—ã–π –Ω–∏–∑ –¥–ª—è 3 –∏–≥—Ä–æ–∫–æ–≤
      { x: 17, y: 17, direction: GAME_CONFIG.directions.LEFT }   // –ü—Ä–∞–≤—ã–π –Ω–∏–∑ –¥–ª—è 4 –∏–≥—Ä–æ–∫–æ–≤
    ];

    for (let i = 0; i < gameState.currentPlayers; i++) {
      const snake = {
        id: i,
        color: GAME_CONFIG.colors[i].value,
        colorName: GAME_CONFIG.colors[i].display,
        segments: [],
        direction: startPositions[i].direction,
        nextDirection: startPositions[i].direction,
        alive: true,
        keys: getPlayerKeys(i)
      };

      // –°–æ–∑–¥–∞–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–µ —Å–µ–≥–º–µ–Ω—Ç—ã
      for (let j = 0; j < 5; j++) {
        snake.segments.push({
          x: startPositions[i].x - j,
          y: startPositions[i].y
        });
      }

      gameState.snakes.push(snake);
      console.log(`–°–æ–∑–¥–∞–Ω–∞ –∑–º–µ—è ${i}:`, snake.segments);
    }
    
    console.log('–í—Å–µ –∑–º–µ–∏ —Å–æ–∑–¥–∞–Ω—ã:', gameState.snakes);
  }

  function getPlayerKeys(playerIndex) {
    const keyMappings = [
      { left: 'ArrowLeft', right: 'ArrowRight' },
      { left: 'KeyA', right: 'KeyD' },
      { left: 'KeyJ', right: 'KeyL' },
      { left: 'Numpad4', right: 'Numpad6' }
    ];
    return keyMappings[playerIndex] || keyMappings[0];
  }

  function createFood() {
    if (gameState.food.length >= gameState.maxFood) {
      return; // –£–∂–µ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –µ–¥—ã
    }
    
    console.log('–°–æ–∑–¥–∞–µ–º –µ–¥—É...');
    let foodPosition;
    let attempts = 0;
    
    do {
      foodPosition = {
        x: Math.floor(Math.random() * 20),
        y: Math.floor(Math.random() * 20),
        id: Date.now() + Math.random() // –£–Ω–∏–∫–∞–ª—å–Ω—ã–π ID
      };
      attempts++;
      if (attempts > 100) {
        console.error('–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Å–≤–æ–±–æ–¥–Ω—É—é –ø–æ–∑–∏—Ü–∏—é –¥–ª—è –µ–¥—ã!');
        return;
      }
    } while (!isPositionFree(foodPosition.x, foodPosition.y));
    
    gameState.food.push(foodPosition);
    console.log(`–ï–¥–∞ —Å–æ–∑–¥–∞–Ω–∞ –≤ –ø–æ–∑–∏—Ü–∏–∏ ${foodPosition.x},${foodPosition.y}. –í—Å–µ–≥–æ –µ–¥—ã: ${gameState.food.length}`);
    updateFoodDisplay();
  }

  function isPositionFree(x, y) {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–∑–∏—Ü–∏—è –Ω–µ –∑–∞–Ω—è—Ç–∞ –∑–º–µ—è–º–∏
    for (const snake of gameState.snakes) {
      for (const segment of snake.segments) {
        if (segment.x === x && segment.y === y) {
          return false;
        }
      }
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–∑–∏—Ü–∏—è –Ω–µ –∑–∞–Ω—è—Ç–∞ –µ–¥–æ–π
    for (const food of gameState.food) {
      if (food.x === x && food.y === y) {
        return false;
      }
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–∑–∏—Ü–∏—è –Ω–µ –∑–∞–Ω—è—Ç–∞ —Å—Ç–µ–Ω–æ–π
    const cell = document.getElementById(`cell-${x}-${y}`);
    if (cell && cell.classList.contains('wall')) {
      return false;
    }
    
    return true;
  }

  function updateFoodDisplay() {
    // –°–Ω–∞—á–∞–ª–∞ —Å–∫—Ä—ã–≤–∞–µ–º –≤—Å—é –µ–¥—É
    document.querySelectorAll('.food').forEach(food => {
      food.style.opacity = '0';
    });
    
    // –ó–∞—Ç–µ–º –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –Ω—É–∂–Ω—É—é –µ–¥—É
    gameState.food.forEach((foodItem, index) => {
      const cell = document.getElementById(`cell-${foodItem.x}-${foodItem.y}`);
      if (cell) {
        // –ò—â–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —ç–ª–µ–º–µ–Ω—Ç –µ–¥—ã –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π
        let foodElement = cell.querySelector('.food');
        
        if (!foodElement) {
          foodElement = document.createElement('div');
          foodElement.className = 'food';
          foodElement.dataset.foodId = foodItem.id;
          cell.appendChild(foodElement);
        }
        
        // –ü–ª–∞–≤–Ω–æ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –µ–¥—É
        foodElement.style.opacity = '1';
        foodElement.style.transform = 'scale(1)';
      }
    });
    
    // –£–¥–∞–ª—è–µ–º —Å–∫—Ä—ã—Ç—É—é –µ–¥—É
    setTimeout(() => {
      document.querySelectorAll('.food').forEach(food => {
        if (food.style.opacity === '0') {
          food.remove();
        }
      });
    }, 300);
  }

  function createControls() {
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤ HUD
    const player1Controls = document.getElementById('player1Controls');
    const player2Controls = document.getElementById('player2Controls');
    
    if (player1Controls) {
      player1Controls.style.display = gameState.currentPlayers >= 1 ? 'flex' : 'none';
    }
    if (player2Controls) {
      player2Controls.style.display = gameState.currentPlayers >= 2 ? 'flex' : 'none';
    }
    
    // –°–∫—Ä—ã–≤–∞–µ–º –æ—Å–Ω–æ–≤–Ω—É—é –ø–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
    if (controlsPanel) {
      controlsPanel.style.display = 'none';
    }
    
    // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∫–Ω–æ–ø–æ–∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤ HUD
    document.querySelectorAll('.player-controls-hud .control-btn').forEach(btn => {
      btn.addEventListener('click', (e) => {
        const player = parseInt(e.currentTarget.dataset.player);
        const action = e.currentTarget.dataset.action;
        handlePlayerInput(player, action);
      });
    });
  }

  function handleKeyPress(e) {
    if (!gameState.isPlaying) return;
    
    for (let i = 0; i < gameState.snakes.length; i++) {
      const snake = gameState.snakes[i];
      if (e.code === snake.keys.left) {
        e.preventDefault();
        turnSnakeLeft(i);
      } else if (e.code === snake.keys.right) {
        e.preventDefault();
        turnSnakeRight(i);
      }
    }
  }

  function handlePlayerInput(player, action) {
    if (action === 'left') {
      turnSnakeLeft(player);
    } else if (action === 'right') {
      turnSnakeRight(player);
    }
  }

  function turnSnakeLeft(playerIndex) {
    const snake = gameState.snakes[playerIndex];
    if (!snake.alive) return;
    
    const directions = [
      GAME_CONFIG.directions.RIGHT,
      GAME_CONFIG.directions.DOWN,
      GAME_CONFIG.directions.LEFT,
      GAME_CONFIG.directions.UP
    ];
    
    const currentIndex = directions.findIndex(dir => 
      dir.x === snake.direction.x && dir.y === snake.direction.y
    );
    
    const newIndex = (currentIndex - 1 + 4) % 4;
    snake.nextDirection = directions[newIndex];
  }

  function turnSnakeRight(playerIndex) {
    const snake = gameState.snakes[playerIndex];
    if (!snake.alive) return;
    
    const directions = [
      GAME_CONFIG.directions.RIGHT,
      GAME_CONFIG.directions.DOWN,
      GAME_CONFIG.directions.LEFT,
      GAME_CONFIG.directions.UP
    ];
    
    const currentIndex = directions.findIndex(dir => 
      dir.x === snake.direction.x && dir.y === snake.direction.y
    );
    
    const newIndex = (currentIndex + 1) % 4;
    snake.nextDirection = directions[newIndex];
  }

  function startGameLoop() {
    const gameSpeed = Math.max(100, 200 - (gameState.speed - 1) * 20); // –ë–æ–ª–µ–µ –ø–ª–∞–≤–Ω–æ–µ –¥–≤–∏–∂–µ–Ω–∏–µ
    
    gameState.gameLoop = setInterval(() => {
      updateGame();
      updateSpeed();
      updateFoodSpawn();
    }, gameSpeed);
  }

  function updateGame() {
    // –û–±–Ω–æ–≤–ª—è–µ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–º–µ–π
    gameState.snakes.forEach(snake => {
      if (snake.alive) {
        snake.direction = snake.nextDirection;
      }
    });
    
    // –î–≤–∏–≥–∞–µ–º –∑–º–µ–π
    gameState.snakes.forEach(snake => {
      if (snake.alive) {
        moveSnake(snake);
      }
    });
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ
    updateSnakesDisplay();
    checkCollisions();
    checkWinCondition();
  }

  function moveSnake(snake) {
    const head = snake.segments[0];
    const newHead = {
      x: head.x + snake.direction.x,
      y: head.y + snake.direction.y
    };
    
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–ª–µ–ø–æ—Ä—Ç–∞ –¥–ª—è –ø—É—Å—Ç–æ–≥–æ –ø–æ–ª—è
    if (gameState.currentField === 'empty') {
      newHead.x = (newHead.x + 20) % 20;
      newHead.y = (newHead.y + 20) % 20;
    }
    
    snake.segments.unshift(newHead);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—ä–µ–ª–∞ –ª–∏ –∑–º–µ—è –µ–¥—É
    let ateFood = false;
    for (let i = gameState.food.length - 1; i >= 0; i--) {
      const foodItem = gameState.food[i];
      if (newHead.x === foodItem.x && newHead.y === foodItem.y) {
        console.log(`–ó–º–µ—è ${snake.id} —Å—ä–µ–ª–∞ –µ–¥—É –≤ –ø–æ–∑–∏—Ü–∏–∏ ${newHead.x},${newHead.y}`);
        gameState.food.splice(i, 1); // –£–¥–∞–ª—è–µ–º —Å—ä–µ–¥–µ–Ω–Ω—É—é –µ–¥—É
        ateFood = true;
        break;
      }
    }
    
    if (ateFood) {
      // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –µ–¥—É —á–µ—Ä–µ–∑ –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è
      setTimeout(() => createFood(), 500);
    } else {
      snake.segments.pop();
    }
  }

  function updateSnakesDisplay() {
    // –°–Ω–∞—á–∞–ª–∞ —Å–∫—Ä—ã–≤–∞–µ–º –≤—Å–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Å–µ–≥–º–µ–Ω—Ç—ã
    document.querySelectorAll('.snake-segment, .snake-head').forEach(el => {
      el.style.opacity = '0';
    });
    
    // –ó–∞—Ç–µ–º –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –Ω—É–∂–Ω—ã–µ
    gameState.snakes.forEach((snake, snakeIndex) => {
      if (!snake.alive) {
        return;
      }
      
      snake.segments.forEach((segment, index) => {
        const cell = document.getElementById(`cell-${segment.x}-${segment.y}`);
        if (cell) {
          // –ò—â–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —ç–ª–µ–º–µ–Ω—Ç –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π
          let segmentElement = cell.querySelector('.snake-segment, .snake-head');
          
          if (!segmentElement) {
            segmentElement = document.createElement('div');
            segmentElement.className = index === 0 ? 'snake-head' : 'snake-segment';
            
            // –ü—Ä–∏–º–µ–Ω—è–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ü–≤–µ—Ç
            const colorClass = snake.colorName.toLowerCase();
            segmentElement.classList.add(`snake-${colorClass}`);
            segmentElement.style.backgroundColor = snake.color;
            
            cell.appendChild(segmentElement);
          }
          
          // –ü–ª–∞–≤–Ω–æ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç
          segmentElement.style.opacity = '1';
          segmentElement.style.transform = 'scale(1)';
        }
      });
    });
    
    // –£–¥–∞–ª—è–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã, –∫–æ—Ç–æ—Ä—ã–µ –±–æ–ª—å—à–µ –Ω–µ –Ω—É–∂–Ω—ã
    setTimeout(() => {
      document.querySelectorAll('.snake-segment, .snake-head').forEach(el => {
        if (el.style.opacity === '0') {
          el.remove();
        }
      });
    }, 300);
  }

  function checkCollisions() {
    gameState.snakes.forEach(snake => {
      if (!snake.alive) return;
      
      const head = snake.segments[0];
      
      // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–æ–ª–∫–Ω–æ–≤–µ–Ω–∏—è —Å–æ —Å—Ç–µ–Ω–æ–π
      if (gameState.currentField !== 'empty') {
        if (head.x < 0 || head.x >= 20 || head.y < 0 || head.y >= 20) {
          killSnake(snake);
          return;
        }
        
        const cell = document.getElementById(`cell-${head.x}-${head.y}`);
        if (cell && cell.classList.contains('wall')) {
          killSnake(snake);
          return;
        }
      }
      
      // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–æ–ª–∫–Ω–æ–≤–µ–Ω–∏—è —Å —Ö–≤–æ—Å—Ç–æ–º
      for (let i = 1; i < snake.segments.length; i++) {
        if (head.x === snake.segments[i].x && head.y === snake.segments[i].y) {
          killSnake(snake);
          return;
        }
      }
      
      // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–æ–ª–∫–Ω–æ–≤–µ–Ω–∏—è —Å –¥—Ä—É–≥–∏–º–∏ –∑–º–µ—è–º–∏
      gameState.snakes.forEach(otherSnake => {
        if (otherSnake.id === snake.id || !otherSnake.alive) return;
        
        otherSnake.segments.forEach(segment => {
          if (head.x === segment.x && head.y === segment.y) {
            killSnake(snake);
            return;
          }
        });
      });
    });
  }

  function killSnake(snake) {
    snake.alive = false;
    updateHUDInfo(`–ó–º–µ—è ${snake.colorName} –ø–æ–≥–∏–±–ª–∞!`);
  }

  function checkWinCondition() {
    const aliveSnakes = gameState.snakes.filter(snake => snake.alive);
    
    if (gameState.currentPlayers === 1) {
      // –î–ª—è 1 –∏–≥—Ä–æ–∫–∞ - –∏–≥—Ä–∞ –ø—Ä–æ–¥–æ–ª–∂–∞–µ—Ç—Å—è –ø–æ–∫–∞ –∑–º–µ—è –∂–∏–≤–∞
      if (aliveSnakes.length === 0) {
        endGame();
      }
    } else {
      // –î–ª—è 2+ –∏–≥—Ä–æ–∫–æ–≤ - –∏–≥—Ä–∞ –∑–∞–∫–∞–Ω—á–∏–≤–∞–µ—Ç—Å—è –∫–æ–≥–¥–∞ –æ—Å—Ç–∞–µ—Ç—Å—è 1 –∑–º–µ—è
      if (aliveSnakes.length <= 1) {
        endGame();
      }
    }
  }

  function updateSpeed() {
    gameState.speedIncreaseTimer += 100;
    
    if (gameState.speedIncreaseTimer >= 30000) { // 30 —Å–µ–∫—É–Ω–¥
      gameState.speed++;
      gameState.speedIncreaseTimer = 0;
      updateDisplay();
      
      // –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º –∏–≥—Ä–æ–≤–æ–π —Ü–∏–∫–ª —Å –Ω–æ–≤–æ–π —Å–∫–æ—Ä–æ—Å—Ç—å—é
      if (gameState.gameLoop) {
        clearInterval(gameState.gameLoop);
        startGameLoop();
      }
    }
  }

  function updateFoodSpawn() {
    gameState.foodSpawnTimer += 100;
    
    // –°–æ–∑–¥–∞–µ–º –µ–¥—É –∫–∞–∂–¥—ã–µ 2-3 —Å–µ–∫—É–Ω–¥—ã
    if (gameState.foodSpawnTimer >= 2000 + Math.random() * 1000) {
      gameState.foodSpawnTimer = 0;
      createFood();
    }
  }

  function endGame() {
    gameState.isPlaying = false;
    gameState.gamePhase = 'finished';
    
    if (gameState.gameLoop) {
      clearInterval(gameState.gameLoop);
      gameState.gameLoop = null;
    }
    
    updateHUDInfo('–ò–≥—Ä–∞ –æ–∫–æ–Ω—á–µ–Ω–∞!');
    showEndModal();
  }

  // –ó–ê–ü–£–°–ö –ò–ì–†–´
  document.addEventListener('DOMContentLoaded', initGame);
  
  // –ì–õ–û–ë–ê–õ–¨–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø –î–õ–Ø –ù–ê–í–ò–ì–ê–¶–ò–ò
  window.goToMenu = () => {
    window.location.href = '../index.html';
  };
})();
