// –ó–∞–ø–æ–º–Ω–∏ —Ü–≤–µ—Ç - –ø–æ–ª–Ω–æ—ç–∫—Ä–∞–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è
(() => {
  // –¶–≤–µ—Ç–∞ –∏–∑ –±—Ä–µ–Ω–¥–±—É–∫–∞ —Å–∞–π—Ç–∞
  const COLORS = [
    { name: 'red', value: '#FE112E', display: '–ö—Ä–∞—Å–Ω—ã–π' },
    { name: 'blue', value: '#1E6FE3', display: '–°–∏–Ω–∏–π' },
    { name: 'green', value: '#2ED573', display: '–ó–µ–ª—ë–Ω—ã–π' },
    { name: 'yellow', value: '#FFE23F', display: '–ñ—ë–ª—Ç—ã–π' },
    { name: 'cyan', value: '#17A2B8', display: '–ì–æ–ª—É–±–æ–π' },
    { name: 'purple', value: '#A55EEA', display: '–§–∏–æ–ª–µ—Ç–æ–≤—ã–π' },
    { name: 'orange', value: '#FE7800', display: '–û—Ä–∞–Ω–∂–µ–≤—ã–π' }
  ];

  // –£—Ä–æ–≤–Ω–∏ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏
  const DIFFICULTIES = [
    { level: 2, name: '–õ—ë–≥–∫–∏–π', count: 2 },
    { level: 4, name: '–°—Ä–µ–¥–Ω–∏–π', count: 4 },
    { level: 6, name: '–í—ã—Å–æ–∫–∏–π', count: 6 },
    { level: 8, name: '–≠–∫—Å—Ç—Ä–∞', count: 8 },
    { level: 10, name: '–í–∞—Å—Å–µ—Ä–º–∞–Ω', count: 10 }
  ];

  // –°–æ—Å—Ç–æ—è–Ω–∏–µ –∏–≥—Ä—ã
  const gameState = {
    currentDifficulty: 2,
    targetColor: null,
    targetPositions: [],
    playerSelections: [],
    gamePhase: 'selecting', // 'selecting', 'showing-target', 'showing-field', 'remembering', 'checking', 'finished'
    score: 0,
    level: 1,
    isPlaying: false,
    showDuration: 3000, // 3 —Å–µ–∫—É–Ω–¥—ã
    allCells: Array.from({length: 25}, (_, i) => i), // –∏–Ω–¥–µ–∫—Å—ã –≤—Å–µ—Ö –∫–ª–µ—Ç–æ–∫ –ø–æ–ª—è
    isWin: false // —Ñ–ª–∞–≥ –¥–ª—è —Ä–∞–∑–ª–∏—á–µ–Ω–∏—è –ø–æ–±–µ–¥—ã –∏ –ø–æ—Ä–∞–∂–µ–Ω–∏—è
  };

  // DOM —ç–ª–µ–º–µ–Ω—Ç—ã
  let stage, gameField, colorSample;
  let hudCheckTop, hudCheckBottom;

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏–≥—Ä—ã
  function initGame() {
    stage = document.getElementById('stage');
    if (!stage) return;

    // –°–∫—Ä—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
    const modalBackdrop = document.getElementById('modalBackdrop');
    if (modalBackdrop) modalBackdrop.hidden = true;

    createGameInterface();
    updateDisplay();
    bindEvents();
    showDifficultyModal();
  }

  // –°–æ–∑–¥–∞–Ω–∏–µ –∏–≥—Ä–æ–≤–æ–≥–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
  function createGameInterface() {
    stage.innerHTML = `
      <div class="game-field" id="gameField" style="display: none;">
        <!-- 25 –∫–ª–µ—Ç–æ–∫ –±—É–¥—É—Ç —Å–æ–∑–¥–∞–Ω—ã –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏ -->
      </div>
      
      <div class="color-sample" id="colorSample" style="display: none;"></div>
    `;

    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Å—ã–ª–∫–∏ –Ω–∞ —ç–ª–µ–º–µ–Ω—Ç—ã
    gameField = document.getElementById('gameField');
    colorSample = document.getElementById('colorSample');
    
    // –ü–æ–ª—É—á–∞–µ–º —Å—Å—ã–ª–∫–∏ –Ω–∞ HUD —ç–ª–µ–º–µ–Ω—Ç—ã
    hudCheckTop = document.getElementById('hudCheckTop');
    hudCheckBottom = document.getElementById('hudCheckBottom');
  }

  // –ü–æ–∫–∞–∑ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ –≤—ã–±–æ—Ä–∞ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏
  function showDifficultyModal() {
    // –°–Ω–∞—á–∞–ª–∞ —Å–∫—Ä—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    const modalBackdrop = document.getElementById('modalBackdrop');
    if (modalBackdrop) modalBackdrop.hidden = true;
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –≤—ã–±–æ—Ä–∞ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏
    const modal = document.getElementById('difficultyModal');
    if (modal) {
      modal.classList.remove('hidden');
    }
  }

  // –°–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ –≤—ã–±–æ—Ä–∞ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏
  function hideDifficultyModal() {
    const modal = document.getElementById('difficultyModal');
    if (modal) {
      modal.classList.add('hidden');
    }
  }

  // –ü—Ä–∏–≤—è–∑–∫–∞ —Å–æ–±—ã—Ç–∏–π
  function bindEvents() {
    // –í—ã–±–æ—Ä —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ –≤ –º–æ–¥–∞–ª—å–Ω–æ–º –æ–∫–Ω–µ
    const difficultyOptions = document.querySelectorAll('.difficulty-option');
    difficultyOptions.forEach(option => {
      option.addEventListener('click', (e) => {
        const level = parseInt(e.currentTarget.dataset.level);
        setDifficulty(level);
        hideDifficultyModal();
        startGame();
      });
    });

    // –ö–Ω–æ–ø–∫–∏ –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤ HUD
    if (hudCheckTop) hudCheckTop.addEventListener('click', checkSelection);
    if (hudCheckBottom) hudCheckBottom.addEventListener('click', checkSelection);

    // –ö–Ω–æ–ø–∫–∏ "–ù–æ–≤–∞—è –ø–∞—Ä—Ç–∏—è" –≤ HUD
    const btnNewTop = document.getElementById('btnNewTop');
    const btnNewBottom = document.getElementById('btnNewBottom');
    const btnRematch = document.getElementById('btnRematch');
    const btnToMenu = document.getElementById('btnToMenu');
    
    if (btnNewTop) btnNewTop.addEventListener('click', resetGame);
    if (btnNewBottom) btnNewBottom.addEventListener('click', resetGame);
    
    // –ö–Ω–æ–ø–∫–∏ "–ú–µ–Ω—é" –≤ HUD
    const btnBackTop = document.getElementById('btnBackTop');
    const btnBackBottom = document.getElementById('btnBackBottom');
    
    if (btnBackTop) btnBackTop.addEventListener('click', () => {
      window.location.href = '../../index.html';
    });
    if (btnBackBottom) btnBackBottom.addEventListener('click', () => {
      window.location.href = '../../index.html';
    });
    if (btnRematch) btnRematch.addEventListener('click', () => {
      // –°–∫—Ä—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
      const modalBackdrop = document.getElementById('modalBackdrop');
      if (modalBackdrop) modalBackdrop.hidden = true;
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —ç—Ç–æ –ø–æ–±–µ–¥–∞ –∏–ª–∏ –ø–æ—Ä–∞–∂–µ–Ω–∏–µ
      if (gameState.isWin) {
        // –ü–æ–±–µ–¥–∞ - –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —É—Ä–æ–≤–Ω—é
        nextLevel();
      } else {
        // –ü–æ—Ä–∞–∂–µ–Ω–∏–µ - –Ω–∞—á–∏–Ω–∞–µ–º –Ω–æ–≤—É—é –∏–≥—Ä—É
        resetGame();
      }
    });
    if (btnToMenu) btnToMenu.addEventListener('click', () => {
      window.location.href = '../../index.html';
    });
  }

  // –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏
  function setDifficulty(level) {
    gameState.currentDifficulty = level;
    updateDisplay();
  }

  // –ù–∞—á–∞–ª–æ –∏–≥—Ä—ã
  function startGame() {
    gameState.isPlaying = true;
    gameState.gamePhase = 'showing-target';
    gameState.playerSelections = [];
    gameState.targetPositions = [];
    gameState.level = 1;

    // –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã–π —Ü–µ–ª–µ–≤–æ–π —Ü–≤–µ—Ç
    gameState.targetColor = COLORS[Math.floor(Math.random() * COLORS.length)];
    
    // –í—ã–±–∏—Ä–∞–µ–º N —Å–ª—É—á–∞–π–Ω—ã—Ö –ø–æ–∑–∏—Ü–∏–π –¥–ª—è —Ü–µ–ª–µ–≤–æ–≥–æ —Ü–≤–µ—Ç–∞
    const availablePositions = [...gameState.allCells];
    gameState.targetPositions = [];
    
    for (let i = 0; i < gameState.currentDifficulty; i++) {
      const randomIndex = Math.floor(Math.random() * availablePositions.length);
      gameState.targetPositions.push(availablePositions.splice(randomIndex, 1)[0]);
    }
    
    updateDisplay();
    showTargetColor();
  }

  // –ü–æ–∫–∞–∑ —ç—Ç–∞–ª–æ–Ω–∞ —Ü–≤–µ—Ç–∞
  async function showTargetColor() {
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —á–µ—Ç–∫–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å –ø–æ–¥—Å–≤–µ—Ç–∫–æ–π —Å–ª–æ–≤–∞ "—Ü–≤–µ—Ç"
    const turnLabelTop = document.getElementById('turnLabelTop');
    const turnLabelBottom = document.getElementById('turnLabelBottom');
    
    if (turnLabelTop) {
      turnLabelTop.innerHTML = `üé® –ó–∞–ø–æ–º–Ω–∏ —Ü–≤–µ—Ç <span style="color: ${gameState.targetColor.value}; font-weight: bold;">${gameState.targetColor.display}</span>`;
    }
    if (turnLabelBottom) {
      turnLabelBottom.innerHTML = `üé® –ó–∞–ø–æ–º–Ω–∏ —Ü–≤–µ—Ç <span style="color: ${gameState.targetColor.value}; font-weight: bold;">${gameState.targetColor.display}</span>`;
    }
    
    colorSample.style.backgroundColor = gameState.targetColor.value;
    colorSample.style.display = 'block';
    colorSample.classList.add('showing');
    
    await sleep(gameState.showDuration);
    
    colorSample.classList.remove('showing');
    colorSample.style.display = 'none';
    
    // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –ø–æ–∫–∞–∑—É –ø–æ–ª—è
    showGameField();
  }

  // –ü–æ–∫–∞–∑ –ø–æ–ª—è —Å —Ü–≤–µ—Ç–∞–º–∏
  async function showGameField() {
    createGameField();
    gameField.style.display = 'grid';
    
    // –†–∞—Å–∫—Ä–∞—à–∏–≤–∞–µ–º –ø–æ–ª–µ
    const cells = gameField.querySelectorAll('.field-cell');
    const otherColors = COLORS.filter(c => c !== gameState.targetColor);
    
    cells.forEach((cell, index) => {
      if (gameState.targetPositions.includes(index)) {
        // –¶–µ–ª–µ–≤—ã–µ –ø–æ–∑–∏—Ü–∏–∏
        cell.style.backgroundColor = gameState.targetColor.value;
        cell.style.color = gameState.targetColor.value === '#FFFFFF' ? '#000000' : '#FFFFFF';
      } else {
        // –û—Å—Ç–∞–ª—å–Ω—ã–µ –ø–æ–∑–∏—Ü–∏–∏ - —Å–ª—É—á–∞–π–Ω—ã–µ —Ü–≤–µ—Ç–∞, –Ω–æ –Ω–µ —Ü–µ–ª–µ–≤–æ–π
        const randomColor = otherColors[Math.floor(Math.random() * otherColors.length)];
        cell.style.backgroundColor = randomColor.value;
        cell.style.color = randomColor.value === '#FFFFFF' ? '#000000' : '#FFFFFF';
      }
    });
    
    await sleep(gameState.showDuration);
    
    // –û—á–∏—â–∞–µ–º –ø–æ–ª–µ
    clearField();
    
    // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Ñ–∞–∑–µ –∑–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
    gameState.gamePhase = 'remembering';
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —á–µ—Ç–∫–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    updateHUDInfo(`–ù–∞–π–¥–∏—Ç–µ ${gameState.currentDifficulty} ${gameState.targetColor.display} –∫–ª–µ—Ç–∫–∏`);
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤ HUD
    showHUDCheckButton();
    
    // –í–∫–ª—é—á–∞–µ–º –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
    enableFieldInteraction();
    updateSelectionStatus();
  }

  // –°–æ–∑–¥–∞–Ω–∏–µ –∏–≥—Ä–æ–≤–æ–≥–æ –ø–æ–ª—è
  function createGameField() {
    gameField.innerHTML = '';
    
    for (let i = 0; i < 25; i++) {
      const cell = document.createElement('div');
      cell.className = 'field-cell';
      cell.dataset.index = i;
      cell.style.backgroundColor = 'var(--neutral-color)';
      cell.style.color = 'var(--text)';
      gameField.appendChild(cell);
    }
  }

  // –û—á–∏—Å—Ç–∫–∞ –ø–æ–ª—è
  function clearField() {
    const cells = gameField.querySelectorAll('.field-cell');
    cells.forEach(cell => {
      cell.style.backgroundColor = 'var(--neutral-color)';
      cell.style.color = 'var(--text)';
      cell.classList.remove('selected', 'correct', 'wrong');
    });
  }

  // –í–∫–ª—é—á–µ–Ω–∏–µ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø–æ–ª—è
  function enableFieldInteraction() {
    const cells = gameField.querySelectorAll('.field-cell');
    cells.forEach(cell => {
      cell.addEventListener('click', handleCellClick);
    });
  }

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–ª–∏–∫–∞ –ø–æ –∫–ª–µ—Ç–∫–µ
  function handleCellClick(e) {
    if (gameState.gamePhase !== 'remembering') return;
    
    const cell = e.target;
    const index = parseInt(cell.dataset.index);
    
    if (gameState.playerSelections.includes(index)) {
      // –£–±–∏—Ä–∞–µ–º –∏–∑ –≤—ã–±–æ—Ä–∞
      gameState.playerSelections = gameState.playerSelections.filter(i => i !== index);
      cell.classList.remove('selected');
    } else {
      // –î–æ–±–∞–≤–ª—è–µ–º –≤ –≤—ã–±–æ—Ä
      if (gameState.playerSelections.length < gameState.currentDifficulty) {
        gameState.playerSelections.push(index);
        cell.classList.add('selected');
      }
    }
    
    updateSelectionStatus();
  }

  // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –≤—ã–±–æ—Ä–∞
  function updateSelectionStatus() {
    const selected = gameState.playerSelections.length;
    const needed = gameState.currentDifficulty;
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –≤ HUD —Å –ø–æ–¥—Å–≤–µ—Ç–∫–æ–π —Ü–≤–µ—Ç–∞
    const turnLabelTop = document.getElementById('turnLabelTop');
    const turnLabelBottom = document.getElementById('turnLabelBottom');
    
    if (turnLabelTop) {
      turnLabelTop.innerHTML = `–í—ã–±—Ä–∞–Ω–æ ${selected} –∏–∑ ${needed} <span style="color: ${gameState.targetColor.value}; font-weight: bold;">${gameState.targetColor.display}</span> –∫–ª–µ—Ç–æ–∫`;
    }
    if (turnLabelBottom) {
      turnLabelBottom.innerHTML = `–í—ã–±—Ä–∞–Ω–æ ${selected} –∏–∑ ${needed} <span style="color: ${gameState.targetColor.value}; font-weight: bold;">${gameState.targetColor.display}</span> –∫–ª–µ—Ç–æ–∫`;
    }
    
    if (selected === needed) {
      // –í–∫–ª—é—á–∞–µ–º –∫–Ω–æ–ø–∫–∏ –ø—Ä–æ–≤–µ—Ä–∫–∏
      if (hudCheckTop) hudCheckTop.disabled = false;
      if (hudCheckBottom) hudCheckBottom.disabled = false;
    } else {
      // –û—Ç–∫–ª—é—á–∞–µ–º –∫–Ω–æ–ø–∫–∏ –ø—Ä–æ–≤–µ—Ä–∫–∏
      if (hudCheckTop) hudCheckTop.disabled = true;
      if (hudCheckBottom) hudCheckBottom.disabled = true;
    }
  }

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—ã–±–æ—Ä–∞
  function checkSelection() {
    gameState.gamePhase = 'checking';
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —á–µ—Ç–∫–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    updateHUDInfo('–ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞—à –≤—ã–±–æ—Ä...');
    
    // –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º –≤—ã–±–æ—Ä —Å —Ü–µ–ª–µ–≤—ã–º–∏ –ø–æ–∑–∏—Ü–∏—è–º–∏
    const correct = gameState.playerSelections.filter(pos => 
      gameState.targetPositions.includes(pos)
    );
    const wrong = gameState.playerSelections.filter(pos => 
      !gameState.targetPositions.includes(pos)
    );
    const missed = gameState.targetPositions.filter(pos => 
      !gameState.playerSelections.includes(pos)
    );
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    showResult(correct, wrong, missed);
  }

  // –ü–æ–∫–∞–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
  function showResult(correct, wrong, missed) {
    const cells = gameField.querySelectorAll('.field-cell');
    
    // –ü–æ–¥—Å–≤–µ—á–∏–≤–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ
    correct.forEach(index => {
      const cell = cells[index];
      cell.classList.add('correct');
      cell.style.backgroundColor = gameState.targetColor.value;
      cell.style.color = gameState.targetColor.value === '#FFFFFF' ? '#000000' : '#FFFFFF';
    });
    
    // –ü–æ–¥—Å–≤–µ—á–∏–≤–∞–µ–º –æ—à–∏–±–∫–∏
    wrong.forEach(index => {
      const cell = cells[index];
      cell.classList.add('wrong');
    });
    
    // –ü–æ–¥—Å–≤–µ—á–∏–≤–∞–µ–º –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã–µ
    missed.forEach(index => {
      const cell = cells[index];
      cell.classList.add('correct');
      cell.style.backgroundColor = gameState.targetColor.value;
      cell.style.color = gameState.targetColor.value === '#FFFFFF' ? '#000000' : '#FFFFFF';
    });
    
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    const isPerfect = wrong.length === 0 && missed.length === 0;
    
    if (isPerfect) {
      gameState.score += gameState.currentDifficulty * 10;
      gameState.level++;
      gameState.isWin = true; // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥ –ø–æ–±–µ–¥—ã
      
      updateHUDInfo('–û—Ç–ª–∏—á–Ω–æ! –í—Å–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ!');
      
      setTimeout(() => {
        // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —É—Ä–æ–≤–Ω—é –±–µ–∑ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
        nextLevel();
      }, 2000);
    } else {
      gameState.isWin = false; // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥ –ø–æ—Ä–∞–∂–µ–Ω–∏—è
      updateHUDInfo(`–ü—Ä–∞–≤–∏–ª—å–Ω–æ: ${correct.length}, –û—à–∏–±–æ–∫: ${wrong.length}, –ü—Ä–æ–ø—É—â–µ–Ω–æ: ${missed.length}`);
      
      setTimeout(() => {
        endGame();
      }, 3000);
    }
    
    // –°–∫—Ä—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫–∏ –ø—Ä–æ–≤–µ—Ä–∫–∏
    hideHUDCheckButton();
    updateDisplay();
  }

  // –°–ª–µ–¥—É—é—â–∏–π —É—Ä–æ–≤–µ–Ω—å
  function nextLevel() {
    gameState.targetPositions = [];
    gameState.playerSelections = [];
    gameState.gamePhase = 'showing-target';
    
    // –°–∫—Ä—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
    const modalBackdrop = document.getElementById('modalBackdrop');
    if (modalBackdrop) modalBackdrop.hidden = true;
    
    // –°–∫—Ä—ã–≤–∞–µ–º –ø–æ–ª–µ
    if (gameField) gameField.style.display = 'none';
    
    // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å–ª–æ–∂–Ω–æ—Å—Ç—å –∫–∞–∂–¥—ã–µ 3 —É—Ä–æ–≤–Ω—è
    if (gameState.level % 3 === 0 && gameState.currentDifficulty < 10) {
      gameState.currentDifficulty = Math.min(10, gameState.currentDifficulty + 2);
    }
    
    // –í—ã–±–∏—Ä–∞–µ–º –Ω–æ–≤—ã–π —Ü–≤–µ—Ç –∏ –ø–æ–∑–∏—Ü–∏–∏
    gameState.targetColor = COLORS[Math.floor(Math.random() * COLORS.length)];
    
    const availablePositions = [...gameState.allCells];
    gameState.targetPositions = [];
    
    for (let i = 0; i < gameState.currentDifficulty; i++) {
      const randomIndex = Math.floor(Math.random() * availablePositions.length);
      gameState.targetPositions.push(availablePositions.splice(randomIndex, 1)[0]);
    }
    
    updateDisplay();
    showTargetColor();
  }

  // –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∏–≥—Ä—ã
  function endGame() {
    gameState.isPlaying = false;
    gameState.gamePhase = 'finished';
    
    // –°–∫—Ä—ã–≤–∞–µ–º HUD —ç–ª–µ–º–µ–Ω—Ç—ã
    hideHUDCheckButton();
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ "–î–∞–≤–∞–π —Å—ã–≥—Ä–∞–µ–º –µ—â–µ?" –≤ HUD
    updateHUDInfo('–î–∞–≤–∞–π —Å—ã–≥—Ä–∞–µ–º –µ—â–µ?');
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏
    showEndModal();
  }

  // –ü–æ–∫–∞–∑ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏
  function showEndModal() {
    const modalBackdrop = document.getElementById('modalBackdrop');
    const modalTitle = document.getElementById('modalTitle');
    const modalSubtitle = document.getElementById('modalSubtitle');
    
    if (modalBackdrop && modalTitle && modalSubtitle) {
      modalTitle.textContent = '–ò–≥—Ä–∞ –æ–∫–æ–Ω—á–µ–Ω–∞!';
      modalSubtitle.textContent = `–§–∏–Ω–∞–ª—å–Ω—ã–π —Å—á—ë—Ç: ${gameState.score} –æ—á–∫–æ–≤, –ø—Ä–æ–π–¥–µ–Ω–æ ${gameState.level - 1} —É—Ä–æ–≤–Ω–µ–π`;
      modalBackdrop.hidden = false;
    }
  }

  // –ü–æ–∫–∞–∑ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ —Å –ø–æ–±–µ–¥–æ–π
  function showWinModal() {
    const modalBackdrop = document.getElementById('modalBackdrop');
    const modalTitle = document.getElementById('modalTitle');
    const modalSubtitle = document.getElementById('modalSubtitle');
    
    if (modalBackdrop && modalTitle && modalSubtitle) {
      modalTitle.textContent = 'üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º!';
      modalSubtitle.textContent = `–£—Ä–æ–≤–µ–Ω—å ${gameState.level - 1} –ø—Ä–æ–π–¥–µ–Ω! –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —É—Ä–æ–≤–Ω—é ${gameState.level}! –°—á—ë—Ç: ${gameState.score} –æ—á–∫–æ–≤`;
      modalBackdrop.hidden = false;
      
      // –ù–ï —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º gamePhase –≤ 'finished' –¥–ª—è –ø–æ–±–µ–¥—ã
      // gameState.gamePhase –æ—Å—Ç–∞–µ—Ç—Å—è –≤ —Ç–µ–∫—É—â–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    }
  }

  // –°–±—Ä–æ—Å –∏–≥—Ä—ã
  function resetGame() {
    gameState.score = 0;
    gameState.level = 1;
    gameState.targetPositions = [];
    gameState.playerSelections = [];
    gameState.gamePhase = 'selecting';
    gameState.isPlaying = false;
    gameState.isWin = false;
    
    // –°–∫—Ä—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω—ã–µ –æ–∫–Ω–∞
    const modalBackdrop = document.getElementById('modalBackdrop');
    if (modalBackdrop) modalBackdrop.hidden = true;
    
    // –°–∫—Ä—ã–≤–∞–µ–º –∏–≥—Ä–æ–≤—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã
    if (gameField) gameField.style.display = 'none';
    if (colorSample) colorSample.style.display = 'none';
    
    // –°–∫—Ä—ã–≤–∞–µ–º HUD —ç–ª–µ–º–µ–Ω—Ç—ã
    hideHUDCheckButton();
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—ã–±–æ—Ä —Å–ª–æ–∂–Ω–æ—Å—Ç–∏
    showDifficultyModal();
    updateDisplay();
  }

  // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
  function updateDisplay() {
    // –û–±–Ω–æ–≤–ª—è–µ–º —É—Ä–æ–≤–µ–Ω—å
    const scoreTop = document.getElementById('scoreTop');
    const scoreBottom = document.getElementById('scoreBottom');
    if (scoreTop) scoreTop.textContent = `–£—Ä–æ–≤–µ–Ω—å: ${gameState.level}`;
    if (scoreBottom) scoreBottom.textContent = `–£—Ä–æ–≤–µ–Ω—å: ${gameState.level}`;
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Å–Ω–æ–≤–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤ HUD —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –∏–≥—Ä–∞ –Ω–µ –∞–∫—Ç–∏–≤–Ω–∞
    if (!gameState.isPlaying) {
      const turnLabelTop = document.getElementById('turnLabelTop');
      const turnLabelBottom = document.getElementById('turnLabelBottom');
      
      if (turnLabelTop) turnLabelTop.textContent = 'üé® –ó–∞–ø–æ–º–Ω–∏ —Ü–≤–µ—Ç';
      if (turnLabelBottom) turnLabelBottom.textContent = 'üé® –ó–∞–ø–æ–º–Ω–∏ —Ü–≤–µ—Ç';
    }
  }

  // –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–¥–µ—Ä–∂–∫–∏
  function sleep(ms) {
    return new Promise(resolve => setTimeout(resolve, ms));
  }

  // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –≤ HUD
  function updateHUDInfo(text) {
    const turnLabelTop = document.getElementById('turnLabelTop');
    const turnLabelBottom = document.getElementById('turnLabelBottom');
    
    if (turnLabelTop) turnLabelTop.textContent = text;
    if (turnLabelBottom) turnLabelBottom.textContent = text;
  }

  // –ü–æ–∫–∞–∑ –∫–Ω–æ–ø–∫–∏ –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤ HUD
  function showHUDCheckButton() {
    if (hudCheckTop) hudCheckTop.style.display = 'block';
    if (hudCheckBottom) hudCheckBottom.style.display = 'block';
  }

  // –°–∫—Ä—ã—Ç–∏–µ –∫–Ω–æ–ø–∫–∏ –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤ HUD
  function hideHUDCheckButton() {
    if (hudCheckTop) hudCheckTop.style.display = 'none';
    if (hudCheckBottom) hudCheckBottom.style.display = 'none';
  }

  // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ —Å–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ
  document.addEventListener('DOMContentLoaded', () => {
    const modalBackdrop = document.getElementById('modalBackdrop');
    if (modalBackdrop) {
      modalBackdrop.hidden = true;
      modalBackdrop.style.display = 'none';
    }
    initGame();
  });
  
  // –≠–∫—Å–ø–æ—Ä—Ç –¥–ª—è –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞
  window.rememberColorGame = {
    startGame,
    setDifficulty,
    getScore: () => gameState.score,
    getLevel: () => gameState.level
  };
})();