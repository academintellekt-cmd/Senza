// –®–ê–ô–ë–ê - –∏–≥—Ä–∞ –¥–ª—è –¥–≤—É—Ö –∏–≥—Ä–æ–∫–æ–≤
(() => {
  // –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø –ò–ì–†–´
  const GAME_CONFIG = {
    name: '–®–∞–π–±–∞',
    icon: 'üèí',
    puckRadius: 30, // –†–∞–¥–∏—É—Å —à–∞–π–±—ã (–¥–∏–∞–º–µ—Ç—Ä = 60px)
    puckMass: 1.0, // –ú–∞—Å—Å–∞ —à–∞–π–±—ã
    gateSize: 90, // –†–∞–∑–º–µ—Ä –≤–æ—Ä–æ—Ç = 1.5 * –¥–∏–∞–º–µ—Ç—Ä —à–∞–π–±—ã (1.5 * 60 = 90)
    pucksPerPlayer: 6,
    friction: 0.98, // –¢—Ä–µ–Ω–∏–µ (–∑–∞–º–µ–¥–ª–µ–Ω–∏–µ)
    wallRestitution: 0.85, // –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –æ—Ç—Å–∫–æ–∫–∞ –æ—Ç —Å—Ç–µ–Ω
    puckRestitution: 0.9, // –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –æ—Ç—Å–∫–æ–∫–∞ —à–∞–π–± –¥—Ä—É–≥ –æ—Ç –¥—Ä—É–≥–∞
    minVelocity: 0.1, // –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å–∫–æ—Ä–æ—Å—Ç—å (–Ω–∏–∂–µ —ç—Ç–æ–π —à–∞–π–±–∞ –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç—Å—è)
    maxAimDistance: 300 // –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ —Å—Ç—Ä–µ–ª–∫–∏ –ø—Ä–∏—Ü–µ–ª–∏–≤–∞–Ω–∏—è (5 * –¥–∏–∞–º–µ—Ç—Ä = 5 * 60 = 300)
  };

  // –°–û–°–¢–û–Ø–ù–ò–ï –ò–ì–†–´
  const gameState = {
    isPlaying: false,
    controlMode: 'direct', // 'direct' –∏–ª–∏ 'aim'
    pucks: [],
    fieldWidth: 0,
    fieldHeight: 0,
    gameLoop: null,
    activeTouches: new Map(), // Map<touchId, puckId>
    draggedPucks: new Map(), // Map<puckId, {startX, startY, touchX, touchY}>
    aimArrows: new Map() // Map<puckId, arrowElement> –¥–ª—è –ø—Ä–∏—Ü–µ–ª—å–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞
  };

  // DOM –≠–õ–ï–ú–ï–ù–¢–´
  let stage, gameField, gateElement;

  // –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø
  function initGame() {
    stage = document.getElementById('stage');
    if (!stage) return;
    
    createGameInterface();
    bindEvents();
    
    // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä–æ–≤ –ø–æ–ª—è
    setTimeout(() => {
      const rect = gameField.getBoundingClientRect();
      gameState.fieldWidth = rect.width;
      gameState.fieldHeight = rect.height;
    }, 100);
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –≤—ã–±–æ—Ä–∞ —Ä–µ–∂–∏–º–∞ –ø—Ä–∏ –ø–µ—Ä–≤–æ–π –∑–∞–≥—Ä—É–∑–∫–µ
    // –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ —É–∂–µ –≤–∏–¥–∏–º–æ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –≤ HTML
  }

  // –°–û–ó–î–ê–ù–ò–ï –ò–ù–¢–ï–†–§–ï–ô–°–ê
  function createGameInterface() {
    stage.innerHTML = `
      <div class="shaiba-field" id="shaibaField">
        <div class="center-wall"></div>
        <div class="gate" id="gate"></div>
      </div>
    `;
    
    gameField = document.getElementById('shaibaField');
    gateElement = document.getElementById('gate');
  }

  // –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –°–û–ë–´–¢–ò–ô
  function bindEvents() {
    // –í—ã–±–æ—Ä —Ä–µ–∂–∏–º–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
    const controlModeOptions = document.querySelectorAll('[data-mode]');
    controlModeOptions.forEach(option => {
      option.addEventListener('click', (e) => {
        const mode = e.currentTarget.dataset.mode;
        gameState.controlMode = mode;
        hideControlModeModal();
        startGame();
      });
    });
    
    // –ö–Ω–æ–ø–∫–∏ HUD
    const btnNewTop = document.getElementById('btnNewTop');
    const btnNewBottom = document.getElementById('btnNewBottom');
    const btnBackTop = document.getElementById('btnBackTop');
    const btnBackBottom = document.getElementById('btnBackBottom');
    const btnRematch = document.getElementById('btnRematch');
    const btnToMenu = document.getElementById('btnToMenu');
    
    if (btnNewTop) btnNewTop.addEventListener('click', resetGame);
    if (btnNewBottom) btnNewBottom.addEventListener('click', resetGame);
    if (btnBackTop) btnBackTop.addEventListener('click', () => window.location.href = '../index.html');
    if (btnBackBottom) btnBackBottom.addEventListener('click', () => window.location.href = '../index.html');
    if (btnRematch) btnRematch.addEventListener('click', () => {
      const modalBackdrop = document.getElementById('modalBackdrop');
      if (modalBackdrop) modalBackdrop.hidden = true;
      showControlModeModal();
    });
    if (btnToMenu) btnToMenu.addEventListener('click', () => window.location.href = '../index.html');
  }
  
  function showControlModeModal() {
    const controlModeModal = document.getElementById('controlModeModal');
    if (controlModeModal) controlModeModal.style.display = 'flex';
  }
  
  function hideControlModeModal() {
    const controlModeModal = document.getElementById('controlModeModal');
    if (controlModeModal) controlModeModal.style.display = 'none';
  }

  // –ò–ì–†–û–í–ê–Ø –õ–û–ì–ò–ö–ê
  function startGame() {
    if (!gameField) return;
    
    // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π –∏–≥—Ä–æ–≤–æ–π —Ü–∏–∫–ª –µ—Å–ª–∏ –æ–Ω –±—ã–ª
    if (gameState.gameLoop) {
      clearInterval(gameState.gameLoop);
      gameState.gameLoop = null;
    }
    
    // –ü–æ–ª—É—á–∞–µ–º —Ä–∞–∑–º–µ—Ä—ã –ø–æ–ª—è
    const rect = gameField.getBoundingClientRect();
    gameState.fieldWidth = rect.width;
    gameState.fieldHeight = rect.height;
    
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä –≤–æ—Ä–æ—Ç
    if (gateElement) {
      gateElement.style.height = `${GAME_CONFIG.gateSize}px`;
    }
    
    // –°–æ–∑–¥–∞–µ–º —à–∞–π–±—ã
    createPucks();
    
    // –ó–∞–ø—É—Å–∫–∞–µ–º –∏–≥—Ä–æ–≤–æ–π —Ü–∏–∫–ª
    gameState.isPlaying = true;
    startGameLoop();
    
    // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –º—É–ª—å—Ç–∏—Ç–∞—á —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ
    setupTouchControls();
  }

  function createPucks() {
    // –û—á–∏—â–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —à–∞–π–±—ã
    gameState.pucks = [];
    const existingPucks = gameField.querySelectorAll('.puck');
    existingPucks.forEach(puck => puck.remove());
    
    const puckDiameter = GAME_CONFIG.puckRadius * 2;
    const puckRadius = GAME_CONFIG.puckRadius;
    const centerY = gameState.fieldHeight / 2;
    
    // –°–æ–∑–¥–∞–µ–º –∫—Ä–∞—Å–Ω—ã–µ —à–∞–π–±—ã (–ª–µ–≤–∞—è —Å—Ç–æ—Ä–æ–Ω–∞) —Ç—Ä–µ—É–≥–æ–ª—å–Ω–∏–∫–æ–º
    // –†–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–µ: 3 —É –±–æ—Ä—Ç–∞, 2 –≤ —Å–µ—Ä–µ–¥–∏–Ω–µ, 1 –±–ª–∏–∂–µ –∫ —Ü–µ–Ω—Ç—Ä—É (–≤–µ—Ä—à–∏–Ω–∞ –∫ —Ü–µ–Ω—Ç—Ä—É)
    const redPucks = [];
    
    // –õ–∞—Ç–µ—Ä–∞–ª—å–Ω—ã–π —Å—Ç–æ–ª–±–µ—Ü (3 —à–∞–π–±—ã) - —É –ª–µ–≤–æ–≥–æ –±–æ—Ä—Ç–∞
    for (let i = 0; i < 3; i++) {
      redPucks.push({
        x: puckRadius + 10, // —É —Å–∞–º–æ–≥–æ –±–æ—Ä—Ç–∞
        y: centerY + (i - 1) * (puckDiameter + 5) // —Ü–µ–Ω—Ç—Ä–∏—Ä—É–µ–º –ø–æ –≤–µ—Ä—Ç–∏–∫–∞–ª–∏
      });
    }
    
    // –°—Ä–µ–¥–Ω–∏–π —Å—Ç–æ–ª–±–µ—Ü (2 —à–∞–π–±—ã) - –±–ª–∏–∂–µ –∫ —Ü–µ–Ω—Ç—Ä—É
    for (let i = 0; i < 2; i++) {
      redPucks.push({
        x: puckRadius + 10 + 60, // —Å–º–µ—â–∞–µ–º –æ—Ç –±–æ—Ä—Ç–∞
        y: centerY + (i - 0.5) * (puckDiameter + 5) // —Ü–µ–Ω—Ç—Ä–∏—Ä—É–µ–º –ø–æ –≤–µ—Ä—Ç–∏–∫–∞–ª–∏
      });
    }
    
    // –ú–µ–¥–∏–∞–ª—å–Ω—ã–π —Å—Ç–æ–ª–±–µ—Ü (1 —à–∞–π–±–∞) - –±–ª–∏–∂–µ –≤—Å–µ–≥–æ –∫ —Ü–µ–Ω—Ç—Ä—É
    redPucks.push({
      x: puckRadius + 10 + 120, // –µ—â–µ –±–ª–∏–∂–µ –∫ —Ü–µ–Ω—Ç—Ä—É
      y: centerY
    });
    
    for (let i = 0; i < GAME_CONFIG.pucksPerPlayer; i++) {
      const pos = redPucks[i];
      const puck = {
        id: `red-${i}`,
        color: 'red',
        x: pos.x,
        y: pos.y,
        vx: 0,
        vy: 0,
        radius: puckRadius,
        mass: GAME_CONFIG.puckMass
      };
      gameState.pucks.push(puck);
      createPuckElement(puck);
    }
    
    // –°–æ–∑–¥–∞–µ–º —Å–∏–Ω–∏–µ —à–∞–π–±—ã (–ø—Ä–∞–≤–∞—è —Å—Ç–æ—Ä–æ–Ω–∞) —Ç—Ä–µ—É–≥–æ–ª—å–Ω–∏–∫–æ–º
    // –†–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–µ: 3 —É –±–æ—Ä—Ç–∞, 2 –≤ —Å–µ—Ä–µ–¥–∏–Ω–µ, 1 –±–ª–∏–∂–µ –∫ —Ü–µ–Ω—Ç—Ä—É (–≤–µ—Ä—à–∏–Ω–∞ –∫ —Ü–µ–Ω—Ç—Ä—É)
    const bluePucks = [];
    
    // –õ–∞—Ç–µ—Ä–∞–ª—å–Ω—ã–π —Å—Ç–æ–ª–±–µ—Ü (3 —à–∞–π–±—ã) - —É –ø—Ä–∞–≤–æ–≥–æ –±–æ—Ä—Ç–∞
    for (let i = 0; i < 3; i++) {
      bluePucks.push({
        x: gameState.fieldWidth - puckRadius - 10, // —É —Å–∞–º–æ–≥–æ –±–æ—Ä—Ç–∞
        y: centerY + (i - 1) * (puckDiameter + 5) // —Ü–µ–Ω—Ç—Ä–∏—Ä—É–µ–º –ø–æ –≤–µ—Ä—Ç–∏–∫–∞–ª–∏
      });
    }
    
    // –°—Ä–µ–¥–Ω–∏–π —Å—Ç–æ–ª–±–µ—Ü (2 —à–∞–π–±—ã) - –±–ª–∏–∂–µ –∫ —Ü–µ–Ω—Ç—Ä—É
    for (let i = 0; i < 2; i++) {
      bluePucks.push({
        x: gameState.fieldWidth - puckRadius - 10 - 60, // —Å–º–µ—â–∞–µ–º –æ—Ç –±–æ—Ä—Ç–∞
        y: centerY + (i - 0.5) * (puckDiameter + 5) // —Ü–µ–Ω—Ç—Ä–∏—Ä—É–µ–º –ø–æ –≤–µ—Ä—Ç–∏–∫–∞–ª–∏
      });
    }
    
    // –ú–µ–¥–∏–∞–ª—å–Ω—ã–π —Å—Ç–æ–ª–±–µ—Ü (1 —à–∞–π–±–∞) - –±–ª–∏–∂–µ –≤—Å–µ–≥–æ –∫ —Ü–µ–Ω—Ç—Ä—É
    bluePucks.push({
      x: gameState.fieldWidth - puckRadius - 10 - 120, // –µ—â–µ –±–ª–∏–∂–µ –∫ —Ü–µ–Ω—Ç—Ä—É
      y: centerY
    });
    
    for (let i = 0; i < GAME_CONFIG.pucksPerPlayer; i++) {
      const pos = bluePucks[i];
      const puck = {
        id: `blue-${i}`,
        color: 'blue',
        x: pos.x,
        y: pos.y,
        vx: 0,
        vy: 0,
        radius: puckRadius,
        mass: GAME_CONFIG.puckMass
      };
      gameState.pucks.push(puck);
      createPuckElement(puck);
    }
    
    updatePuckCount();
  }

  function createPuckElement(puck) {
    const puckElement = document.createElement('div');
    puckElement.className = `puck ${puck.color}`;
    puckElement.id = puck.id;
    puckElement.style.width = `${puck.radius * 2}px`;
    puckElement.style.height = `${puck.radius * 2}px`;
    puckElement.style.left = `${puck.x - puck.radius}px`;
    puckElement.style.top = `${puck.y - puck.radius}px`;
    
    if (gameField) {
      gameField.appendChild(puckElement);
    }
  }

  function setupTouchControls() {
    if (!gameField) return;
    
    // Touch —Å–æ–±—ã—Ç–∏—è
    gameField.addEventListener('touchstart', handleTouchStart, { passive: false });
    gameField.addEventListener('touchmove', handleTouchMove, { passive: false });
    gameField.addEventListener('touchend', handleTouchEnd, { passive: false });
    gameField.addEventListener('touchcancel', handleTouchEnd, { passive: false });
    
    // Mouse —Å–æ–±—ã—Ç–∏—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    gameField.addEventListener('mousedown', handleMouseDown);
    gameField.addEventListener('mousemove', handleMouseMove);
    gameField.addEventListener('mouseup', handleMouseUp);
  }

  function handleTouchStart(e) {
    e.preventDefault();
    const rect = gameField.getBoundingClientRect();
    
    for (let i = 0; i < e.changedTouches.length; i++) {
      const touch = e.changedTouches[i];
      const touchX = touch.clientX - rect.left;
      const touchY = touch.clientY - rect.top;
      
      // –ù–∞—Ö–æ–¥–∏–º —à–∞–π–±—É –ø–æ–¥ –ø–∞–ª—å—Ü–µ–º
      const puck = findPuckAtPosition(touchX, touchY);
      if (puck && !gameState.activeTouches.has(touch.identifier)) {
        gameState.activeTouches.set(touch.identifier, puck.id);
        gameState.draggedPucks.set(puck.id, {
          startX: puck.x,
          startY: puck.y,
          touchX: touchX,
          touchY: touchY
        });
        
        // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —à–∞–π–±—É
        puck.vx = 0;
        puck.vy = 0;
        
        // –î–æ–±–∞–≤–ª—è–µ–º –∫–ª–∞—Å—Å –¥–ª—è –≤–∏–∑—É–∞–ª—å–Ω–æ–≥–æ —ç—Ñ—Ñ–µ–∫—Ç–∞
        const puckElement = document.getElementById(puck.id);
        if (puckElement) puckElement.classList.add('dragging');
        
        // –í –ø—Ä–∏—Ü–µ–ª—å–Ω–æ–º —Ä–µ–∂–∏–º–µ —Å–æ–∑–¥–∞–µ–º —Å—Ç—Ä–µ–ª–∫—É
        if (gameState.controlMode === 'aim') {
          createAimArrow(puck.id, puck.x, puck.y);
        }
      }
    }
  }

  function handleTouchMove(e) {
    e.preventDefault();
    const rect = gameField.getBoundingClientRect();
    
    for (let i = 0; i < e.changedTouches.length; i++) {
      const touch = e.changedTouches[i];
      const puckId = gameState.activeTouches.get(touch.identifier);
      
      if (puckId) {
        const puck = gameState.pucks.find(p => p.id === puckId);
        const dragData = gameState.draggedPucks.get(puckId);
        
        if (puck && dragData) {
          const touchX = touch.clientX - rect.left;
          const touchY = touch.clientY - rect.top;
          
          if (gameState.controlMode === 'direct') {
            // –ü—Ä—è–º–æ–π —Ä–µ–∂–∏–º - –ø–µ—Ä–µ–º–µ—â–∞–µ–º —à–∞–π–±—É
            puck.x = touchX;
            puck.y = touchY;
            
            // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –ø–æ–∑–∏—Ü–∏—é –≥—Ä–∞–Ω–∏—Ü–∞–º–∏ –ø–æ–ª—è
            puck.x = Math.max(puck.radius, Math.min(gameState.fieldWidth - puck.radius, puck.x));
            puck.y = Math.max(puck.radius, Math.min(gameState.fieldHeight - puck.radius, puck.y));
            
            // –û–±–Ω–æ–≤–ª—è–µ–º touchX –∏ touchY –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ —Å–∫–æ—Ä–æ—Å—Ç–∏ –ø—Ä–∏ –æ—Ç–ø—É—Å–∫–∞–Ω–∏–∏
            dragData.touchX = touchX;
            dragData.touchY = touchY;
          } else if (gameState.controlMode === 'aim') {
            // –ü—Ä–∏—Ü–µ–ª—å–Ω—ã–π —Ä–µ–∂–∏–º - –æ–±–Ω–æ–≤–ª—è–µ–º —Å—Ç—Ä–µ–ª–∫—É
            updateAimArrow(puckId, puck.x, puck.y, touchX, touchY);
          }
        }
      }
    }
  }

  function handleTouchEnd(e) {
    e.preventDefault();
    
    for (let i = 0; i < e.changedTouches.length; i++) {
      const touch = e.changedTouches[i];
      const puckId = gameState.activeTouches.get(touch.identifier);
      
      if (puckId) {
        const puck = gameState.pucks.find(p => p.id === puckId);
        const dragData = gameState.draggedPucks.get(puckId);
        
        if (puck && dragData) {
          const rect = gameField.getBoundingClientRect();
          const touchX = touch.clientX - rect.left;
          const touchY = touch.clientY - rect.top;
          
          if (gameState.controlMode === 'direct') {
            // –ü—Ä—è–º–æ–π —Ä–µ–∂–∏–º - –≤—ã—á–∏—Å–ª—è–µ–º —Å–∫–æ—Ä–æ—Å—Ç—å –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –¥–≤–∏–∂–µ–Ω–∏—è
            const dx = touchX - dragData.touchX;
            const dy = touchY - dragData.touchY;
            
            puck.vx = dx * 0.5;
            puck.vy = dy * 0.5;
          } else if (gameState.controlMode === 'aim') {
            // –ü—Ä–∏—Ü–µ–ª—å–Ω—ã–π —Ä–µ–∂–∏–º - –∑–∞–ø—É—Å–∫–∞–µ–º —à–∞–π–±—É –≤ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–∏ —Å—Ç—Ä–µ–ª–∫–∏
            const dx = touchX - dragData.startX;
            const dy = touchY - dragData.startY;
            const distance = Math.sqrt(dx * dx + dy * dy);
            
            if (distance > 5) {
              // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–∏—Å—Ç–∞–Ω—Ü–∏—é –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π –¥–ª–∏–Ω–æ–π —Å—Ç—Ä–µ–ª–∫–∏
              const clampedDistance = Math.min(distance, GAME_CONFIG.maxAimDistance);
              const power = clampedDistance / GAME_CONFIG.maxAimDistance; // 0 –¥–æ 1
              
              // –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ—Ç —Ü–µ–Ω—Ç—Ä–∞ —à–∞–π–±—ã –∫ —Ç–æ—á–∫–µ –∫–∞—Å–∞–Ω–∏—è
              const dirX = dx / distance;
              const dirY = dy / distance;
              
              // –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Å–∫–æ—Ä–æ—Å—Ç—å –¥–ª—è –ø—Ä–∏—Ü–µ–ª—å–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞
              const maxSpeed = 25;
              puck.vx = dirX * maxSpeed * power;
              puck.vy = dirY * maxSpeed * power;
            }
          }
          
          // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é —Å–∫–æ—Ä–æ—Å—Ç—å
          const maxSpeed = 25;
          const speed = Math.sqrt(puck.vx * puck.vx + puck.vy * puck.vy);
          if (speed > maxSpeed) {
            puck.vx = (puck.vx / speed) * maxSpeed;
            puck.vy = (puck.vy / speed) * maxSpeed;
          }
        }
        
        // –£–±–∏—Ä–∞–µ–º –≤–∏–∑—É–∞–ª—å–Ω—ã–π —ç—Ñ—Ñ–µ–∫—Ç
        const puckElement = document.getElementById(puckId);
        if (puckElement) puckElement.classList.remove('dragging');
        
        // –£–¥–∞–ª—è–µ–º —Å—Ç—Ä–µ–ª–∫—É –≤ –ø—Ä–∏—Ü–µ–ª—å–Ω–æ–º —Ä–µ–∂–∏–º–µ
        if (gameState.controlMode === 'aim') {
          removeAimArrow(puckId);
        }
        
        gameState.activeTouches.delete(touch.identifier);
        gameState.draggedPucks.delete(puckId);
      }
    }
  }

  // Mouse –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
  let currentMousePuck = null;
  let mouseStartPos = { x: 0, y: 0 };

  function handleMouseDown(e) {
    const rect = gameField.getBoundingClientRect();
    const mouseX = e.clientX - rect.left;
    const mouseY = e.clientY - rect.top;
    
    const puck = findPuckAtPosition(mouseX, mouseY);
    if (puck) {
      currentMousePuck = puck;
      mouseStartPos = { x: puck.x, y: puck.y };
      puck.vx = 0;
      puck.vy = 0;
      
      const puckElement = document.getElementById(puck.id);
      if (puckElement) puckElement.classList.add('dragging');
      
      // –í –ø—Ä–∏—Ü–µ–ª—å–Ω–æ–º —Ä–µ–∂–∏–º–µ —Å–æ–∑–¥–∞–µ–º —Å—Ç—Ä–µ–ª–∫—É
      if (gameState.controlMode === 'aim') {
        createAimArrow(puck.id, puck.x, puck.y);
      }
    }
  }

  function handleMouseMove(e) {
    if (currentMousePuck) {
      const rect = gameField.getBoundingClientRect();
      const mouseX = e.clientX - rect.left;
      const mouseY = e.clientY - rect.top;
      
      if (gameState.controlMode === 'direct') {
        // –ü—Ä—è–º–æ–π —Ä–µ–∂–∏–º - –ø–µ—Ä–µ–º–µ—â–∞–µ–º —à–∞–π–±—É
        currentMousePuck.x = mouseX;
        currentMousePuck.y = mouseY;
        
        // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –ø–æ–∑–∏—Ü–∏—é –≥—Ä–∞–Ω–∏—Ü–∞–º–∏ –ø–æ–ª—è
        currentMousePuck.x = Math.max(currentMousePuck.radius, Math.min(gameState.fieldWidth - currentMousePuck.radius, currentMousePuck.x));
        currentMousePuck.y = Math.max(currentMousePuck.radius, Math.min(gameState.fieldHeight - currentMousePuck.radius, currentMousePuck.y));
      } else if (gameState.controlMode === 'aim') {
        // –ü—Ä–∏—Ü–µ–ª—å–Ω—ã–π —Ä–µ–∂–∏–º - –æ–±–Ω–æ–≤–ª—è–µ–º —Å—Ç—Ä–µ–ª–∫—É
        updateAimArrow(currentMousePuck.id, currentMousePuck.x, currentMousePuck.y, mouseX, mouseY);
      }
    }
  }

  function handleMouseUp(e) {
    if (currentMousePuck) {
      const rect = gameField.getBoundingClientRect();
      const mouseX = e.clientX - rect.left;
      const mouseY = e.clientY - rect.top;
      
      if (gameState.controlMode === 'direct') {
        // –ü—Ä—è–º–æ–π —Ä–µ–∂–∏–º
        const dx = mouseX - currentMousePuck.x;
        const dy = mouseY - currentMousePuck.y;
        
        currentMousePuck.vx = dx * 0.5;
        currentMousePuck.vy = dy * 0.5;
      } else if (gameState.controlMode === 'aim') {
        // –ü—Ä–∏—Ü–µ–ª—å–Ω—ã–π —Ä–µ–∂–∏–º
        const dx = mouseX - mouseStartPos.x;
        const dy = mouseY - mouseStartPos.y;
        const distance = Math.sqrt(dx * dx + dy * dy);
        
        if (distance > 5) {
          const clampedDistance = Math.min(distance, GAME_CONFIG.maxAimDistance);
          const power = clampedDistance / GAME_CONFIG.maxAimDistance;
          
          const dirX = dx / distance;
          const dirY = dy / distance;
          
          const maxSpeed = 25;
          currentMousePuck.vx = dirX * maxSpeed * power;
          currentMousePuck.vy = dirY * maxSpeed * power;
        }
      }
      
      // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é —Å–∫–æ—Ä–æ—Å—Ç—å
      const maxSpeed = 25;
      const speed = Math.sqrt(currentMousePuck.vx * currentMousePuck.vx + currentMousePuck.vy * currentMousePuck.vy);
      if (speed > maxSpeed) {
        currentMousePuck.vx = (currentMousePuck.vx / speed) * maxSpeed;
        currentMousePuck.vy = (currentMousePuck.vy / speed) * maxSpeed;
      }
      
      const puckElement = document.getElementById(currentMousePuck.id);
      if (puckElement) puckElement.classList.remove('dragging');
      
      // –£–¥–∞–ª—è–µ–º —Å—Ç—Ä–µ–ª–∫—É –≤ –ø—Ä–∏—Ü–µ–ª—å–Ω–æ–º —Ä–µ–∂–∏–º–µ
      if (gameState.controlMode === 'aim') {
        removeAimArrow(currentMousePuck.id);
      }
      
      currentMousePuck = null;
    }
  }
  
  // –§–£–ù–ö–¶–ò–ò –î–õ–Ø –¢–†–ï–£–ì–û–õ–¨–ù–ò–ö–ê –ü–†–ò–¶–ï–õ–ò–í–ê–ù–ò–Ø
  function createAimArrow(puckId, startX, startY) {
    // –£–¥–∞–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Ç—Ä–µ—É–≥–æ–ª—å–Ω–∏–∫ –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
    removeAimArrow(puckId);
    
    // –°–æ–∑–¥–∞–µ–º SVG —ç–ª–µ–º–µ–Ω—Ç
    const svg = document.createElementNS('http://www.w3.org/2000/svg', 'svg');
    svg.id = `arrow-${puckId}`;
    svg.classList.add('aim-triangle');
    svg.style.left = `${startX}px`;
    svg.style.top = `${startY}px`;
    svg.style.overflow = 'visible';
    
    // –°–æ–∑–¥–∞–µ–º –≥—Ä–∞–¥–∏–µ–Ω—Ç –¥–ª—è –∫—Ä—É–≥–ª–æ–π –∞—É—Ä—ã
    const defs = document.createElementNS('http://www.w3.org/2000/svg', 'defs');
    const radialGradient = document.createElementNS('http://www.w3.org/2000/svg', 'radialGradient');
    radialGradient.id = `auraGradient-${puckId}`;
    radialGradient.setAttribute('cx', '50%');
    radialGradient.setAttribute('cy', '50%');
    radialGradient.setAttribute('r', '50%');
    
    // –ó–µ–ª–µ–Ω—ã–π –≤ —Ü–µ–Ω—Ç—Ä–µ
    const stop1 = document.createElementNS('http://www.w3.org/2000/svg', 'stop');
    stop1.setAttribute('offset', '0%');
    stop1.setAttribute('stop-color', '#22c55e');
    stop1.setAttribute('stop-opacity', '0.8');
    
    // –ñ–µ–ª—Ç—ã–π –≤ —Å–µ—Ä–µ–¥–∏–Ω–µ
    const stop2 = document.createElementNS('http://www.w3.org/2000/svg', 'stop');
    stop2.setAttribute('offset', '50%');
    stop2.setAttribute('stop-color', '#eab308');
    stop2.setAttribute('stop-opacity', '0.8');
    
    // –ö—Ä–∞—Å–Ω—ã–π –ø–æ –∫—Ä–∞—è–º
    const stop3 = document.createElementNS('http://www.w3.org/2000/svg', 'stop');
    stop3.setAttribute('offset', '100%');
    stop3.setAttribute('stop-color', '#ef4444');
    stop3.setAttribute('stop-opacity', '0.8');
    
    radialGradient.appendChild(stop1);
    radialGradient.appendChild(stop2);
    radialGradient.appendChild(stop3);
    defs.appendChild(radialGradient);
    
    // –°–æ–∑–¥–∞–µ–º –∫—Ä—É–≥–ª—É—é –∞—É—Ä—É (–≤–∏–¥–Ω–∞ —Ç–æ–ª—å–∫–æ –≤ –æ–±–ª–∞—Å—Ç–∏ —Ç—Ä–µ—É–≥–æ–ª—å–Ω–∏–∫–∞)
    const auraCircle = document.createElementNS('http://www.w3.org/2000/svg', 'circle');
    auraCircle.setAttribute('r', GAME_CONFIG.maxAimDistance); // —Ä–∞–¥–∏—É—Å –∞—É—Ä—ã = –º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –≤—ã—Å–æ—Ç–∞ —Ç—Ä–µ—É–≥–æ–ª—å–Ω–∏–∫–∞
    auraCircle.setAttribute('fill', `url(#auraGradient-${puckId})`);
    auraCircle.setAttribute('cx', '0');
    auraCircle.setAttribute('cy', '0');
    
    // –°–æ–∑–¥–∞–µ–º —Ç—Ä–µ—É–≥–æ–ª—å–Ω–∏–∫ (–±–µ–∑ –∑–∞–ª–∏–≤–∫–∏, —Ç–æ–ª—å–∫–æ –æ–±–≤–æ–¥–∫–∞)
    const polygon = document.createElementNS('http://www.w3.org/2000/svg', 'polygon');
    polygon.setAttribute('fill', 'none');
    polygon.setAttribute('stroke', 'rgba(0, 0, 0, 0.3)');
    polygon.setAttribute('stroke-width', '2');
    
    // –°–æ–∑–¥–∞–µ–º –º–∞—Å–∫—É –¥–ª—è –∞—É—Ä—ã (—á—Ç–æ–±—ã –æ–Ω–∞ –±—ã–ª–∞ –≤–∏–¥–Ω–∞ —Ç–æ–ª—å–∫–æ –≤ –æ–±–ª–∞—Å—Ç–∏ —Ç—Ä–µ—É–≥–æ–ª—å–Ω–∏–∫–∞)
    const mask = document.createElementNS('http://www.w3.org/2000/svg', 'mask');
    mask.id = `triangleMask-${puckId}`;
    
    const maskRect = document.createElementNS('http://www.w3.org/2000/svg', 'rect');
    maskRect.setAttribute('width', '100%');
    maskRect.setAttribute('height', '100%');
    maskRect.setAttribute('fill', 'black');
    
    const maskPolygon = document.createElementNS('http://www.w3.org/2000/svg', 'polygon');
    maskPolygon.setAttribute('fill', 'white');
    
    mask.appendChild(maskRect);
    mask.appendChild(maskPolygon);
    defs.appendChild(mask);
    
    // –ü—Ä–∏–º–µ–Ω—è–µ–º –º–∞—Å–∫—É –∫ –∞—É—Ä–µ
    auraCircle.setAttribute('mask', `url(#triangleMask-${puckId})`);
    
    svg.appendChild(defs);
    svg.appendChild(auraCircle);
    svg.appendChild(polygon);
    
    if (gameField) {
      gameField.appendChild(svg);
      gameState.aimArrows.set(puckId, svg);
    }
  }
  
  function updateAimArrow(puckId, startX, startY, endX, endY) {
    const svg = gameState.aimArrows.get(puckId);
    if (!svg) return;
    
    const dx = endX - startX;
    const dy = endY - startY;
    const distance = Math.sqrt(dx * dx + dy * dy);
    
    if (distance < 1) return;
    
    // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É
    const clampedDistance = Math.min(distance, GAME_CONFIG.maxAimDistance);
    
    // –í—ã—á–∏—Å–ª—è–µ–º —à–∏—Ä–∏–Ω—É –æ—Å–Ω–æ–≤–∞–Ω–∏—è –ø—Ä–∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π –≤—ã—Å–æ—Ç–µ
    // –ü—Ä–∏ maxAimDistance (300px) –æ—Å–Ω–æ–≤–∞–Ω–∏–µ = –¥–∏–∞–º–µ—Ç—Ä —à–∞–π–±—ã (60px)
    const puckDiameter = GAME_CONFIG.puckRadius * 2;
    const baseWidthAtMax = puckDiameter;
    
    // –ü—Ä–æ–ø–æ—Ä—Ü–∏–æ–Ω–∞–ª—å–Ω–æ —É–º–µ–Ω—å—à–∞–µ–º —à–∏—Ä–∏–Ω—É –æ—Å–Ω–æ–≤–∞–Ω–∏—è –ø—Ä–∏ –º–µ–Ω—å—à–µ–π –≤—ã—Å–æ—Ç–µ
    const baseWidth = (clampedDistance / GAME_CONFIG.maxAimDistance) * baseWidthAtMax;
    const halfBase = baseWidth / 2;
    
    // –í—ã—á–∏—Å–ª—è–µ–º —É–≥–æ–ª –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è
    const angle = Math.atan2(dy, dx);
    
    // –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã —Ç—Ä–µ—É–≥–æ–ª—å–Ω–∏–∫–∞ (–≤–µ—Ä—à–∏–Ω–∞ –≤ —Ü–µ–Ω—Ç—Ä–µ (0,0))
    // –¢–æ—á–∫–∞ 1: –≤–µ—Ä—à–∏–Ω–∞ (–≤ —Ü–µ–Ω—Ç—Ä–µ —à–∞–π–±—ã)
    const p1x = 0;
    const p1y = 0;
    
    // –¢–æ—á–∫–∞ 2: –ª–µ–≤—ã–π —É–≥–æ–ª –æ—Å–Ω–æ–≤–∞–Ω–∏—è
    const p2x = Math.cos(angle) * clampedDistance - Math.sin(angle) * halfBase;
    const p2y = Math.sin(angle) * clampedDistance + Math.cos(angle) * halfBase;
    
    // –¢–æ—á–∫–∞ 3: –ø—Ä–∞–≤—ã–π —É–≥–æ–ª –æ—Å–Ω–æ–≤–∞–Ω–∏—è
    const p3x = Math.cos(angle) * clampedDistance + Math.sin(angle) * halfBase;
    const p3y = Math.sin(angle) * clampedDistance - Math.cos(angle) * halfBase;
    
     // –û–±–Ω–æ–≤–ª—è–µ–º polygon
     const polygon = svg.querySelector('polygon');
     if (polygon) {
       polygon.setAttribute('points', `${p1x},${p1y} ${p2x},${p2y} ${p3x},${p3y}`);
       
       // –û–±–Ω–æ–≤–ª—è–µ–º –º–∞—Å–∫—É –¥–ª—è –∞—É—Ä—ã
       const maskPolygon = svg.querySelector('mask polygon');
       if (maskPolygon) {
         maskPolygon.setAttribute('points', `${p1x},${p1y} ${p2x},${p2y} ${p3x},${p3y}`);
       }
       
       // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–∑–∏—Ü–∏—é –∞—É—Ä—ã (—Ü–µ–Ω—Ç—Ä –≤ –≤–µ—Ä—à–∏–Ω–µ —Ç—Ä–µ—É–≥–æ–ª—å–Ω–∏–∫–∞)
       const auraCircle = svg.querySelector('circle');
       if (auraCircle) {
         auraCircle.setAttribute('cx', `${p1x}`);
         auraCircle.setAttribute('cy', `${p1y}`);
       }
     }
    
    // –í—ã—á–∏—Å–ª—è–µ–º –≥—Ä–∞–Ω–∏—Ü—ã –¥–ª—è viewBox
    const minX = Math.min(p1x, p2x, p3x);
    const minY = Math.min(p1y, p2y, p3y);
    const maxX = Math.max(p1x, p2x, p3x);
    const maxY = Math.max(p1y, p2y, p3y);
    
    const padding = 5;
    const viewBoxWidth = maxX - minX + padding * 2;
    const viewBoxHeight = maxY - minY + padding * 2;
    
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º viewBox —Å —Ü–µ–Ω—Ç—Ä–æ–º –≤ (0,0) - –≤–µ—Ä—à–∏–Ω–µ —Ç—Ä–µ—É–≥–æ–ª—å–Ω–∏–∫–∞
    svg.setAttribute('viewBox', `${minX - padding} ${minY - padding} ${viewBoxWidth} ${viewBoxHeight}`);
    svg.setAttribute('width', `${viewBoxWidth}`);
    svg.setAttribute('height', `${viewBoxHeight}`);
    
    // –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–µ–º –ø–æ–∑–∏—Ü–∏—é SVG —Ç–∞–∫, —á—Ç–æ–±—ã —Ç–æ—á–∫–∞ (0,0) –±—ã–ª–∞ –≤ —Ü–µ–Ω—Ç—Ä–µ —à–∞–π–±—ã
    svg.style.left = `${startX + minX - padding}px`;
    svg.style.top = `${startY + minY - padding}px`;
  }
  
  function removeAimArrow(puckId) {
    const arrow = gameState.aimArrows.get(puckId);
    if (arrow) {
      arrow.remove();
      gameState.aimArrows.delete(puckId);
    }
  }

  function findPuckAtPosition(x, y) {
    for (let i = gameState.pucks.length - 1; i >= 0; i--) {
      const puck = gameState.pucks[i];
      const dx = x - puck.x;
      const dy = y - puck.y;
      const distance = Math.sqrt(dx * dx + dy * dy);
      
      if (distance <= puck.radius) {
        return puck;
      }
    }
    return null;
  }

  // –§–ò–ó–ò–ö–ê
  function startGameLoop() {
    gameState.gameLoop = setInterval(() => {
      updatePhysics();
      updateDisplay();
      checkWinCondition();
    }, 16); // ~60 FPS
  }

  function updatePhysics() {
    // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–∑–∏—Ü–∏–∏ –≤—Å–µ—Ö —à–∞–π–±
    for (let puck of gameState.pucks) {
      // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–µ–º—ã–µ —à–∞–π–±—ã
      if (gameState.draggedPucks.has(puck.id)) continue;
      
      // –ü—Ä–∏–º–µ–Ω—è–µ–º —Ç—Ä–µ–Ω–∏–µ
      puck.vx *= GAME_CONFIG.friction;
      puck.vy *= GAME_CONFIG.friction;
      
      // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ—á–µ–Ω—å –º–µ–¥–ª–µ–Ω–Ω—ã–µ —à–∞–π–±—ã
      if (Math.abs(puck.vx) < GAME_CONFIG.minVelocity) puck.vx = 0;
      if (Math.abs(puck.vy) < GAME_CONFIG.minVelocity) puck.vy = 0;
      
      // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–∑–∏—Ü–∏—é
      puck.x += puck.vx;
      puck.y += puck.vy;
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–æ–ª–∫–Ω–æ–≤–µ–Ω–∏—è —Å–æ —Å—Ç–µ–Ω–∞–º–∏
    for (let puck of gameState.pucks) {
      checkWallCollision(puck);
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–æ–ª–∫–Ω–æ–≤–µ–Ω–∏—è –º–µ–∂–¥—É —à–∞–π–±–∞–º–∏
    for (let i = 0; i < gameState.pucks.length; i++) {
      for (let j = i + 1; j < gameState.pucks.length; j++) {
        checkPuckCollision(gameState.pucks[i], gameState.pucks[j]);
      }
    }
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –≤–∏–∑—É–∞–ª—å–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã
    for (let puck of gameState.pucks) {
      const puckElement = document.getElementById(puck.id);
      if (puckElement) {
        puckElement.style.left = `${puck.x - puck.radius}px`;
        puckElement.style.top = `${puck.y - puck.radius}px`;
      }
    }
  }

  function checkWallCollision(puck) {
    const centerX = gameState.fieldWidth / 2;
    const gateTop = gameState.fieldHeight / 2 - GAME_CONFIG.gateSize / 2;
    const gateBottom = gameState.fieldHeight / 2 + GAME_CONFIG.gateSize / 2;
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–µ–≤–æ–π –∏ –ø—Ä–∞–≤–æ–π —Å—Ç–µ–Ω
    if (puck.x - puck.radius < 0) {
      puck.x = puck.radius;
      puck.vx = Math.abs(puck.vx) * GAME_CONFIG.wallRestitution;
    } else if (puck.x + puck.radius > gameState.fieldWidth) {
      puck.x = gameState.fieldWidth - puck.radius;
      puck.vx = -Math.abs(puck.vx) * GAME_CONFIG.wallRestitution;
    }
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–µ—Ä—Ö–Ω–µ–π –∏ –Ω–∏–∂–Ω–µ–π —Å—Ç–µ–Ω
    if (puck.y - puck.radius < 0) {
      puck.y = puck.radius;
      puck.vy = Math.abs(puck.vy) * GAME_CONFIG.wallRestitution;
    } else if (puck.y + puck.radius > gameState.fieldHeight) {
      puck.y = gameState.fieldHeight - puck.radius;
      puck.vy = -Math.abs(puck.vy) * GAME_CONFIG.wallRestitution;
    }
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ü–µ–Ω—Ç—Ä–∞–ª—å–Ω–æ–π —Å—Ç–µ–Ω—ã (—Å —É—á–µ—Ç–æ–º –≤–æ—Ä–æ—Ç)
    const wallThickness = 8;
    const wallLeft = centerX - wallThickness / 2;
    const wallRight = centerX + wallThickness / 2;
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏–µ —Å —Ü–µ–Ω—Ç—Ä–∞–ª—å–Ω–æ–π —Å—Ç–µ–Ω–æ–π
    if (puck.x + puck.radius > wallLeft && puck.x - puck.radius < wallRight) {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –≤ –≤–æ—Ä–æ—Ç–∞—Ö –ª–∏ —à–∞–π–±–∞
      if (puck.y < gateTop || puck.y > gateBottom) {
        // –°—Ç–æ–ª–∫–Ω–æ–≤–µ–Ω–∏–µ —Å–æ —Å—Ç–µ–Ω–æ–π (–Ω–µ —Å –≤–æ—Ä–æ—Ç–∞–º–∏)
        if (puck.vx > 0) {
          // –î–≤–∏–∂–µ—Ç—Å—è –≤–ø—Ä–∞–≤–æ
          puck.x = wallLeft - puck.radius;
          puck.vx = -Math.abs(puck.vx) * GAME_CONFIG.wallRestitution;
        } else if (puck.vx < 0) {
          // –î–≤–∏–∂–µ—Ç—Å—è –≤–ª–µ–≤–æ
          puck.x = wallRight + puck.radius;
          puck.vx = Math.abs(puck.vx) * GAME_CONFIG.wallRestitution;
        }
      }
    }
  }

  function checkPuckCollision(puck1, puck2) {
    const dx = puck2.x - puck1.x;
    const dy = puck2.y - puck1.y;
    const distance = Math.sqrt(dx * dx + dy * dy);
    const minDistance = puck1.radius + puck2.radius;
    
    if (distance < minDistance && distance > 0) {
      // –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –≤–µ–∫—Ç–æ—Ä —Å—Ç–æ–ª–∫–Ω–æ–≤–µ–Ω–∏—è
      const nx = dx / distance;
      const ny = dy / distance;
      
      // –†–∞–∑–¥–µ–ª—è–µ–º —à–∞–π–±—ã, —á—Ç–æ–±—ã –æ–Ω–∏ –Ω–µ –ø–µ—Ä–µ–∫—Ä—ã–≤–∞–ª–∏—Å—å
      const overlap = minDistance - distance;
      const separationX = nx * overlap / 2;
      const separationY = ny * overlap / 2;
      
      puck1.x -= separationX;
      puck1.y -= separationY;
      puck2.x += separationX;
      puck2.y += separationY;
      
      // –í—ã—á–∏—Å–ª—è–µ–º –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—É—é —Å–∫–æ—Ä–æ—Å—Ç—å
      const dvx = puck2.vx - puck1.vx;
      const dvy = puck2.vy - puck1.vy;
      
      // –°–∫–æ—Ä–æ—Å—Ç—å –≤–¥–æ–ª—å –ª–∏–Ω–∏–∏ —Å—Ç–æ–ª–∫–Ω–æ–≤–µ–Ω–∏—è
      const dvn = dvx * nx + dvy * ny;
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –¥–≤–∏–∂—É—Ç—Å—è –ª–∏ —à–∞–π–±—ã –Ω–∞–≤—Å—Ç—Ä–µ—á—É –¥—Ä—É–≥ –¥—Ä—É–≥—É
      if (dvn < 0) {
        // –£–ø—Ä—É–≥–æ–µ —Å—Ç–æ–ª–∫–Ω–æ–≤–µ–Ω–∏–µ —Å —É—á–µ—Ç–æ–º –º–∞—Å—Å
        const m1 = puck1.mass;
        const m2 = puck2.mass;
        const impulse = (2 * dvn) / (m1 + m2);
        
        puck1.vx += impulse * m2 * nx * GAME_CONFIG.puckRestitution;
        puck1.vy += impulse * m2 * ny * GAME_CONFIG.puckRestitution;
        puck2.vx -= impulse * m1 * nx * GAME_CONFIG.puckRestitution;
        puck2.vy -= impulse * m1 * ny * GAME_CONFIG.puckRestitution;
        
        // –í–∏–∑—É–∞–ª—å–Ω—ã–π —ç—Ñ—Ñ–µ–∫—Ç —Å—Ç–æ–ª–∫–Ω–æ–≤–µ–Ω–∏—è
        const puckElement1 = document.getElementById(puck1.id);
        const puckElement2 = document.getElementById(puck2.id);
        if (puckElement1) {
          puckElement1.classList.add('puck-collision');
          setTimeout(() => puckElement1.classList.remove('puck-collision'), 200);
        }
        if (puckElement2) {
          puckElement2.classList.add('puck-collision');
          setTimeout(() => puckElement2.classList.remove('puck-collision'), 200);
        }
      }
    }
  }

  function checkWinCondition() {
    const centerX = gameState.fieldWidth / 2;
    
    let leftSidePucks = 0;
    let rightSidePucks = 0;
    
    for (let puck of gameState.pucks) {
      if (puck.x < centerX) {
        leftSidePucks++;
      } else {
        rightSidePucks++;
      }
    }
    
    // –ò–≥—Ä–∞ –∑–∞–∫–∞–Ω—á–∏–≤–∞–µ—Ç—Å—è, –∫–æ–≥–¥–∞ –Ω–∞ –æ–¥–Ω–æ–π –∏–∑ –ø–æ–ª–æ–≤–∏–Ω –Ω–µ –æ—Å—Ç–∞–ª–æ—Å—å –Ω–∏ –æ–¥–Ω–æ–π —à–∞–π–±—ã
    // –ü–æ–±–µ–∂–¥–∞–µ—Ç –∏–≥—Ä–æ–∫, –Ω–∞ —á—å–µ–π —Ç–µ—Ä—Ä–∏—Ç–æ—Ä–∏–∏ –Ω–µ –æ—Å—Ç–∞–ª–æ—Å—å —à–∞–π–±
    if (leftSidePucks === 0 && rightSidePucks > 0) {
      endGame('–ö—Ä–∞—Å–Ω—ã–π'); // –ù–∞ —Ç–µ—Ä—Ä–∏—Ç–æ—Ä–∏–∏ –∫—Ä–∞—Å–Ω–æ–≥–æ –Ω–µ—Ç —à–∞–π–± - –∫—Ä–∞—Å–Ω—ã–π –ø–æ–±–µ–¥–∏–ª
    } else if (rightSidePucks === 0 && leftSidePucks > 0) {
      endGame('–°–∏–Ω–∏–π'); // –ù–∞ —Ç–µ—Ä—Ä–∏—Ç–æ—Ä–∏–∏ —Å–∏–Ω–µ–≥–æ –Ω–µ—Ç —à–∞–π–± - —Å–∏–Ω–∏–π –ø–æ–±–µ–¥–∏–ª
    }
  }

  function updatePuckCount() {
    const centerX = gameState.fieldWidth / 2;
    
    let leftSidePucks = 0;
    let rightSidePucks = 0;
    
    for (let puck of gameState.pucks) {
      if (puck.x < centerX) {
        leftSidePucks++;
      } else {
        rightSidePucks++;
      }
    }
    
    const scoreText = `–ö—Ä–∞—Å–Ω—ã–π: ${leftSidePucks} | –°–∏–Ω–∏–π: ${rightSidePucks}`;
    const scoreTop = document.getElementById('scoreTop');
    const scoreBottom = document.getElementById('scoreBottom');
    if (scoreTop) scoreTop.textContent = scoreText;
    if (scoreBottom) scoreBottom.textContent = scoreText;
  }

  function updateDisplay() {
    updatePuckCount();
  }

  function endGame(winner) {
    gameState.isPlaying = false;
    
    if (gameState.gameLoop) {
      clearInterval(gameState.gameLoop);
      gameState.gameLoop = null;
    }
    
    // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Å–µ —à–∞–π–±—ã
    for (let puck of gameState.pucks) {
      puck.vx = 0;
      puck.vy = 0;
    }
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
    const modalBackdrop = document.getElementById('modalBackdrop');
    const modalTitle = document.getElementById('modalTitle');
    const modalSubtitle = document.getElementById('modalSubtitle');
    
    if (modalBackdrop && modalTitle && modalSubtitle) {
      modalTitle.textContent = `–ü–æ–±–µ–¥–∏–ª ${winner} –∏–≥—Ä–æ–∫!`;
      modalSubtitle.textContent = '–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º —Å –ø–æ–±–µ–¥–æ–π!';
      modalBackdrop.hidden = false;
    }
  }

  function resetGame() {
    // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏–≥—Ä–æ–≤–æ–π —Ü–∏–∫–ª
    if (gameState.gameLoop) {
      clearInterval(gameState.gameLoop);
      gameState.gameLoop = null;
    }
    
    // –û—á–∏—â–∞–µ–º –∫–∞—Å–∞–Ω–∏—è
    gameState.activeTouches.clear();
    gameState.draggedPucks.clear();
    
    // –£–¥–∞–ª—è–µ–º –≤—Å–µ —Å—Ç—Ä–µ–ª–∫–∏ –ø—Ä–∏—Ü–µ–ª–∏–≤–∞–Ω–∏—è
    gameState.aimArrows.forEach(arrow => arrow.remove());
    gameState.aimArrows.clear();
    
    // –°–∫—Ä—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    const modalBackdrop = document.getElementById('modalBackdrop');
    if (modalBackdrop) modalBackdrop.hidden = true;
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –≤—ã–±–æ—Ä–∞ —Ä–µ–∂–∏–º–∞
    showControlModeModal();
  }

  // –ó–ê–ü–£–°–ö –ò–ì–†–´
  document.addEventListener('DOMContentLoaded', initGame);
  
  // –ì–õ–û–ë–ê–õ–¨–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø –î–õ–Ø –ù–ê–í–ò–ì–ê–¶–ò–ò
  window.goToMenu = () => {
    window.location.href = '../index.html';
  };
})();


