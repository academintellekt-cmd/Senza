// –°—ë–º–∞ - –ø–æ–ª–Ω–æ—ç–∫—Ä–∞–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è
(() => {
  // –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø –ò–ì–†–´
  const GAME_CONFIG = {
    name: '–°—ë–º–∞',
    icon: 'üß†',
    colors: [
      { name: 'red', value: '#FE112E', display: '–ö—Ä–∞—Å–Ω—ã–π', sector: 'top-left' },
      { name: 'blue', value: '#1E6FE3', display: '–°–∏–Ω–∏–π', sector: 'top-right' },
      { name: 'green', value: '#2ED573', display: '–ó–µ–ª—ë–Ω—ã–π', sector: 'bottom-left' },
      { name: 'yellow', value: '#FFE23F', display: '–ñ—ë–ª—Ç—ã–π', sector: 'bottom-right' }
    ],
    flashDuration: 400,
    pauseDuration: 200,
    sequenceStartLength: 1
  };

  // –°–û–°–¢–û–Ø–ù–ò–ï –ò–ì–†–´
  const gameState = {
    currentPlayers: 1,
    score: 0,
    level: 1,
    isPlaying: false,
    gamePhase: 'selecting', // 'selecting', 'showing', 'waiting', 'finished'
    isWin: false,
    currentSequence: [],
    playerSequences: {}, // –û–±—ä–µ–∫—Ç –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–µ–π –∫–∞–∂–¥–æ–≥–æ –∏–≥—Ä–æ–∫–∞
    currentPlayerIndex: 0,
    players: [],
    showSequenceIndex: 0,
    isShowingSequence: false,
    playersAnswered: 0, // –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–≥—Ä–æ–∫–æ–≤, –¥–∞–≤—à–∏—Ö –æ—Ç–≤–µ—Ç
    totalActivePlayers: 0, // –¢–µ–∫—É—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∏–≥—Ä–æ–∫–æ–≤
    playersAtRoundStart: 0 // –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∏–≥—Ä–æ–∫–æ–≤ –≤ –Ω–∞—á–∞–ª–µ —Ä–∞—É–Ω–¥–∞
  };

  // DOM –≠–õ–ï–ú–ï–ù–¢–´
  let stage, centerCircle, playersSection;
  let hudCheckTop, hudCheckBottom;

  // –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø
  function initGame() {
    console.log('–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏–≥—Ä—ã –°—ë–º–∞...');
    stage = document.getElementById('stage');
    if (!stage) {
      console.error('–≠–ª–µ–º–µ–Ω—Ç stage –Ω–µ –Ω–∞–π–¥–µ–Ω!');
      return;
    }
    
    console.log('–°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞...');
    createGameInterface();
    updateDisplay();
    bindEvents();
    showPlayersModal();
    console.log('–ò–≥—Ä–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞!');
  }

  // –°–û–ó–î–ê–ù–ò–ï –ò–ù–¢–ï–†–§–ï–ô–°–ê
  function createGameInterface() {
    console.log('–°–æ–∑–¥–∞–Ω–∏–µ –∏–≥—Ä–æ–≤–æ–≥–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞...');
    stage.innerHTML = `
      <div class="syoma-game" id="syomaGame">
        <div class="center-circle" id="centerCircle">
          <div class="sector top-left" data-color="red"></div>
          <div class="sector top-right" data-color="blue"></div>
          <div class="sector bottom-left" data-color="green"></div>
          <div class="sector bottom-right" data-color="yellow"></div>
        </div>
        <div class="players-section" id="playersSection">
          <div style="grid-column: 1/-1; text-align: center; color: white; font-size: 18px;">
            –í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–≥—Ä–æ–∫–æ–≤ –¥–ª—è –Ω–∞—á–∞–ª–∞ –∏–≥—Ä—ã
          </div>
        </div>
      </div>
    `;
    
    const syomaGame = document.getElementById('syomaGame');
    centerCircle = document.getElementById('centerCircle');
    playersSection = document.getElementById('playersSection');
    hudCheckTop = document.getElementById('hudCheckTop');
    hudCheckBottom = document.getElementById('hudCheckBottom');
    
    console.log('–≠–ª–µ–º–µ–Ω—Ç—ã —Å–æ–∑–¥–∞–Ω—ã:', {
      syomaGame: !!syomaGame,
      centerCircle: !!centerCircle,
      playersSection: !!playersSection
    });
  }

  // –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò
  function updateDisplay() {
    const scoreTop = document.getElementById('scoreTop');
    const scoreBottom = document.getElementById('scoreBottom');
    if (scoreTop) scoreTop.textContent = `–£—Ä–æ–≤–µ–Ω—å: ${gameState.level}`;
    if (scoreBottom) scoreBottom.textContent = `–£—Ä–æ–≤–µ–Ω—å: ${gameState.level}`;
    
    if (!gameState.isPlaying) {
      const turnLabelTop = document.getElementById('turnLabelTop');
      const turnLabelBottom = document.getElementById('turnLabelBottom');
      if (turnLabelTop) turnLabelTop.textContent = `${GAME_CONFIG.icon} ${GAME_CONFIG.name}`;
      if (turnLabelBottom) turnLabelBottom.textContent = `${GAME_CONFIG.icon} ${GAME_CONFIG.name}`;
    }
  }

  function updateHUDInfo(text) {
    const turnLabelTop = document.getElementById('turnLabelTop');
    const turnLabelBottom = document.getElementById('turnLabelBottom');
    if (turnLabelTop) turnLabelTop.textContent = text;
    if (turnLabelBottom) turnLabelBottom.textContent = text;
  }

  function showHUDCheckButton() {
    if (hudCheckTop) hudCheckTop.style.display = 'block';
    if (hudCheckBottom) hudCheckBottom.style.display = 'block';
  }

  function hideHUDCheckButton() {
    if (hudCheckTop) hudCheckTop.style.display = 'none';
    if (hudCheckBottom) hudCheckBottom.style.display = 'none';
  }

  function resetGame() {
    gameState.score = 0;
    gameState.level = 1;
    gameState.isPlaying = false;
    gameState.gamePhase = 'selecting';
    gameState.isWin = false;
    gameState.currentSequence = [];
    gameState.playerSequences = {};
    gameState.currentPlayerIndex = 0;
    gameState.players = [];
    gameState.showSequenceIndex = 0;
    gameState.isShowingSequence = false;
    gameState.playersAnswered = 0;
    gameState.totalActivePlayers = 0;
    gameState.playersAtRoundStart = 0;
    
    const modalBackdrop = document.getElementById('modalBackdrop');
    if (modalBackdrop) {
      modalBackdrop.hidden = true;
      modalBackdrop.style.display = 'none';
      modalBackdrop.style.visibility = 'hidden';
    }
    
    hideHUDCheckButton();
    
    showPlayersModal();
    updateDisplay();
  }

  // –ú–û–î–ê–õ–¨–ù–´–ï –û–ö–ù–ê
  function showPlayersModal() {
    const modalBackdrop = document.getElementById('modalBackdrop');
    if (modalBackdrop) modalBackdrop.hidden = true;
    
    const playersModal = document.getElementById('playersModal');
    if (playersModal) playersModal.style.display = 'flex';
  }

  function hidePlayersModal() {
    const playersModal = document.getElementById('playersModal');
    if (playersModal) playersModal.style.display = 'none';
  }

  function showEndModal(winner, finalScore) {
    console.log('showEndModal –≤—ã–∑–≤–∞–Ω–∞:', { winner, finalScore });
    const modalBackdrop = document.getElementById('modalBackdrop');
    const modalTitle = document.getElementById('modalTitle');
    const modalSubtitle = document.getElementById('modalSubtitle');
    
    console.log('–≠–ª–µ–º–µ–Ω—Ç—ã –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞:', {
      modalBackdrop: !!modalBackdrop,
      modalTitle: !!modalTitle,
      modalSubtitle: !!modalSubtitle
    });
    
    if (modalBackdrop && modalTitle && modalSubtitle) {
      if (winner) {
        modalTitle.textContent = `–ü–æ–±–µ–¥–∏–ª –ò–≥—Ä–æ–∫ ${winner.id}`;
        modalSubtitle.textContent = `–í–∞—à —Å—á—ë—Ç: ${finalScore}`;
      } else {
        modalTitle.textContent = '–ò–≥—Ä–∞ –æ–∫–æ–Ω—á–µ–Ω–∞!';
        modalSubtitle.textContent = `–í—Å–µ –∏–≥—Ä–æ–∫–∏ –≤—ã–±—ã–ª–∏. –°—á—ë—Ç: ${finalScore}`;
      }
      modalBackdrop.hidden = false;
      modalBackdrop.style.display = 'flex';
      modalBackdrop.style.visibility = 'visible';
      console.log('–ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –ø–æ–∫–∞–∑–∞–Ω–æ');
    } else {
      console.error('–≠–ª–µ–º–µ–Ω—Ç—ã –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã!');
    }
  }

  // –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –°–û–ë–´–¢–ò–ô
  function bindEvents() {
    // –í—ã–±–æ—Ä –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∏–≥—Ä–æ–∫–æ–≤
    const difficultyOptions = document.querySelectorAll('.difficulty-option');
    difficultyOptions.forEach(option => {
      option.addEventListener('click', (e) => {
        const players = parseInt(e.currentTarget.dataset.players);
        gameState.currentPlayers = players;
        hidePlayersModal();
        startGame();
      });
    });

    // –ö–Ω–æ–ø–∫–∏ HUD
    const btnNewTop = document.getElementById('btnNewTop');
    const btnNewBottom = document.getElementById('btnNewBottom');
    const btnBackTop = document.getElementById('btnBackTop');
    const btnBackBottom = document.getElementById('btnBackBottom');
    const btnRematch = document.getElementById('btnRematch');
    const btnToMenu = document.getElementById('btnToMenu');
    
    if (btnNewTop) btnNewTop.addEventListener('click', resetGame);
    if (btnNewBottom) btnNewBottom.addEventListener('click', resetGame);
    if (btnBackTop) btnBackTop.addEventListener('click', () => window.location.href = '../../index.html');
    if (btnBackBottom) btnBackBottom.addEventListener('click', () => window.location.href = '../../index.html');
    if (btnRematch) btnRematch.addEventListener('click', () => {
      const modalBackdrop = document.getElementById('modalBackdrop');
      if (modalBackdrop) {
        modalBackdrop.hidden = true;
        modalBackdrop.style.display = 'none';
        modalBackdrop.style.visibility = 'hidden';
      }
      resetGame();
    });
    if (btnToMenu) btnToMenu.addEventListener('click', () => window.location.href = '../../index.html');
  }

  // –ê–õ–ì–û–†–ò–¢–ú –ò–ì–†–´
  function startGame() {
    gameState.isPlaying = true;
    gameState.gamePhase = 'showing';
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏–≥—Ä–æ–∫–æ–≤
    gameState.players = [];
    for (let i = 1; i <= gameState.currentPlayers; i++) {
      gameState.players.push({
        id: i,
        status: 'active',
        score: 0
      });
    }
    
    createPlayersInterface();
    updateDisplay();
    showGameInstructions();
  }

  function createPlayersInterface() {
    if (!playersSection) return;
    
    playersSection.innerHTML = '';
    
    gameState.players.forEach((player, index) => {
      const playerDiv = document.createElement('div');
      playerDiv.className = 'player-controls';
      // –î–ª—è –∏–≥—Ä–æ–∫–æ–≤ 1 –∏ 2 –º–µ–Ω—è–µ–º –ø–æ—Ä—è–¥–æ–∫ –∏ –ø–µ—Ä–µ–≤–æ—Ä–∞—á–∏–≤–∞–µ–º
      if (player.id <= 2) {
        playerDiv.innerHTML = `
          <div class="player-status ${player.status} flipped">${getPlayerStatusText(player.status)}</div>
          <div class="player-buttons">
            <button class="player-btn red" data-color="red" data-player="${player.id}"></button>
            <button class="player-btn blue" data-color="blue" data-player="${player.id}"></button>
            <button class="player-btn green" data-color="green" data-player="${player.id}"></button>
            <button class="player-btn yellow" data-color="yellow" data-player="${player.id}"></button>
          </div>
          <div class="player-label flipped">–ò–≥—Ä–æ–∫ ${player.id}</div>
        `;
      } else {
        playerDiv.innerHTML = `
          <div class="player-label">–ò–≥—Ä–æ–∫ ${player.id}</div>
          <div class="player-buttons">
            <button class="player-btn red" data-color="red" data-player="${player.id}"></button>
            <button class="player-btn blue" data-color="blue" data-player="${player.id}"></button>
            <button class="player-btn green" data-color="green" data-player="${player.id}"></button>
            <button class="player-btn yellow" data-color="yellow" data-player="${player.id}"></button>
          </div>
          <div class="player-status ${player.status}">${getPlayerStatusText(player.status)}</div>
        `;
      }
      
      // –ü–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä—É–µ–º –∏–≥—Ä–æ–∫–æ–≤ –ø–æ —É–≥–ª–∞–º
      const positions = [
        { top: '120px', left: '20px' },      // –í–µ—Ä—Ö–Ω–∏–π –ª–µ–≤—ã–π
        { top: '120px', right: '20px' },     // –í–µ—Ä—Ö–Ω–∏–π –ø—Ä–∞–≤—ã–π
        { bottom: '120px', left: '20px' },   // –ù–∏–∂–Ω–∏–π –ª–µ–≤—ã–π
        { bottom: '120px', right: '20px' }   // –ù–∏–∂–Ω–∏–π –ø—Ä–∞–≤—ã–π
      ];
      
      if (positions[index]) {
        Object.assign(playerDiv.style, positions[index]);
      }
      
      playersSection.appendChild(playerDiv);
    });
    
    // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∫–Ω–æ–ø–æ–∫ –∏–≥—Ä–æ–∫–æ–≤
    const playerBtns = playersSection.querySelectorAll('.player-btn');
    playerBtns.forEach(btn => {
      btn.addEventListener('click', handlePlayerButtonClick);
    });
  }

  function getPlayerStatusText(status) {
    switch (status) {
      case 'active': return '–ê–∫—Ç–∏–≤–µ–Ω';
      case 'eliminated': return '–í—ã–±—ã–ª';
      case 'winner': return '–ü–æ–±–µ–¥–∏—Ç–µ–ª—å!';
      default: return '';
    }
  }

  function showGameInstructions() {
    updateHUDInfo('–°–º–æ—Ç—Ä–∏—Ç–µ –Ω–∞ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å...');
    setTimeout(() => {
      generateNewSequence();
      showSequence();
    }, 2000);
  }

  function generateNewSequence() {
    gameState.currentSequence = [];
    const sequenceLength = gameState.level;
    
    for (let i = 0; i < sequenceLength; i++) {
      const randomColor = GAME_CONFIG.colors[Math.floor(Math.random() * GAME_CONFIG.colors.length)];
      gameState.currentSequence.push(randomColor.name);
    }
    
    // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –≤—Å–µ—Ö –∏–≥—Ä–æ–∫–æ–≤
    gameState.playerSequences = {};
    gameState.playersAnswered = 0;
    gameState.totalActivePlayers = gameState.players.filter(p => p.status === 'active').length;
    gameState.playersAtRoundStart = gameState.totalActivePlayers;
    gameState.showSequenceIndex = 0;
    gameState.isShowingSequence = true;
  }

  async function showSequence() {
    updateHUDInfo('–ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å');
    
    // –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ –≤—Å–µ —Å–µ–∫—Ç–æ—Ä–∞ –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã –≤ –Ω–∞—á–∞–ª–µ
    const allSectors = centerCircle.querySelectorAll('.sector');
    allSectors.forEach(sector => sector.classList.remove('active'));
    
    for (let i = 0; i < gameState.currentSequence.length; i++) {
      const color = gameState.currentSequence[i];
      const sector = centerCircle.querySelector(`[data-color="${color}"]`);
      
      if (sector) {
        // –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Å–µ–∫—Ç–æ—Ä–∞ –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã
        allSectors.forEach(s => s.classList.remove('active'));
        
        // –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º —Ç–µ–∫—É—â–∏–π —Å–µ–∫—Ç–æ—Ä
        sector.classList.add('active');
        await sleep(GAME_CONFIG.flashDuration);
        
        // –î–µ–∞–∫—Ç–∏–≤–∏—Ä—É–µ–º —Å–µ–∫—Ç–æ—Ä
        sector.classList.remove('active');
        await sleep(GAME_CONFIG.pauseDuration);
      }
    }
    
    // –§–∏–Ω–∞–ª—å–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ - —É–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ –≤—Å–µ —Å–µ–∫—Ç–æ—Ä–∞ –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã
    allSectors.forEach(sector => sector.classList.remove('active'));
    
    gameState.isShowingSequence = false;
    gameState.gamePhase = 'waiting';
    enablePlayerInput();
  }

  function enablePlayerInput() {
    const activePlayers = gameState.players.filter(p => p.status === 'active');
    if (activePlayers.length === 0) {
      endGame();
      return;
    }
    
    updateHUDInfo(`–ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å (${gameState.playersAnswered}/${gameState.playersAtRoundStart})`);
    
    const playerBtns = playersSection.querySelectorAll('.player-btn');
    playerBtns.forEach(btn => {
      const playerId = parseInt(btn.dataset.player);
      const player = gameState.players.find(p => p.id === playerId);
      btn.disabled = !player || player.status !== 'active';
    });
  }

  function handlePlayerButtonClick(e) {
    if (gameState.gamePhase !== 'waiting' || gameState.isShowingSequence) return;
    
    const color = e.target.dataset.color;
    const playerId = parseInt(e.target.dataset.player);
    const player = gameState.players.find(p => p.id === playerId);
    
    if (!player || player.status !== 'active') return;
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∏–≥—Ä–æ–∫–∞, –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
    if (!gameState.playerSequences[playerId]) {
      gameState.playerSequences[playerId] = [];
    }
    
    // –î–æ–±–∞–≤–ª—è–µ–º —Ü–≤–µ—Ç –∫ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∏–≥—Ä–æ–∫–∞
    gameState.playerSequences[playerId].push(color);
    
    // –ü–æ–¥—Å–≤–µ—á–∏–≤–∞–µ–º –Ω–∞–∂–∞—Ç—É—é –∫–Ω–æ–ø–∫—É
    e.target.style.transform = 'scale(0.9)';
    setTimeout(() => {
      e.target.style.transform = '';
    }, 150);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–≤–µ—Ä—à–∏–ª –ª–∏ –∏–≥—Ä–æ–∫ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å
    if (gameState.playerSequences[playerId].length === gameState.currentSequence.length) {
      checkPlayerSequence(player);
    }
  }

  function checkPlayerSequence(player) {
    const playerSequence = gameState.playerSequences[player.id];
    const isCorrect = playerSequence.every((color, index) => 
      color === gameState.currentSequence[index]
    );
    
    // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –æ—Ç–≤–µ—á–∞–≤—à–∏—Ö –∏–≥—Ä–æ–∫–æ–≤
    gameState.playersAnswered++;
    
    if (isCorrect) {
      player.score++;
      gameState.score = Math.max(gameState.score, player.score);
      
      updateHUDInfo(`–ò–≥—Ä–æ–∫ ${player.id} –ø—Ä–∞–≤–∏–ª—å–Ω–æ! (${gameState.playersAnswered}/${gameState.playersAtRoundStart})`);
      
      // –ï—Å–ª–∏ –≤—Å–µ –∏–≥—Ä–æ–∫–∏ –æ—Ç–≤–µ—Ç–∏–ª–∏, –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —É—Ä–æ–≤–Ω—é
      if (gameState.playersAnswered >= gameState.playersAtRoundStart) {
        gameState.level++;
        
        setTimeout(() => {
          updateHUDInfo(`–í—Å–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ! –£—Ä–æ–≤–µ–Ω—å ${gameState.level}`);
          setTimeout(() => {
            generateNewSequence();
            showSequence();
          }, 1500);
        }, 1000);
      }
      
    } else {
      // –ò–≥—Ä–æ–∫ –≤—ã–±—ã–≤–∞–µ—Ç
      player.status = 'eliminated';
      gameState.totalActivePlayers--;
      
      updateHUDInfo(`–ò–≥—Ä–æ–∫ ${player.id} –≤—ã–±—ã–ª! (${gameState.playersAnswered}/${gameState.playersAtRoundStart})`);
      
      // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –∏–≥—Ä–æ–∫–∞
      updatePlayerStatus(player.id);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –∑–∞–≤–µ—Ä—à–∞—Ç—å —Ä–∞—É–Ω–¥
      setTimeout(() => {
        const activePlayers = gameState.players.filter(p => p.status === 'active');
        
        // –ï—Å–ª–∏ —ç—Ç–æ –æ–¥–∏–Ω–æ—á–Ω–∞—è –∏–≥—Ä–∞ –∏–ª–∏ –æ—Å—Ç–∞–ª—Å—è 1 –∏–ª–∏ –º–µ–Ω—å—à–µ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∏–≥—Ä–æ–∫–æ–≤, –∑–∞–≤–µ—Ä—à–∞–µ–º –∏–≥—Ä—É
        if (gameState.currentPlayers === 1 || activePlayers.length <= 1) {
          endGame();
        } else {
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ—Ç–≤–µ—Ç–∏–ª–∏ –ª–∏ –≤—Å–µ –∏–≥—Ä–æ–∫–∏
          if (gameState.playersAnswered >= gameState.playersAtRoundStart) {
            // –í—Å–µ –∏–≥—Ä–æ–∫–∏ –æ—Ç–≤–µ—Ç–∏–ª–∏, –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —É—Ä–æ–≤–Ω—é
            gameState.level++;
            setTimeout(() => {
              generateNewSequence();
              showSequence();
            }, 1500);
          } else {
            // –ù–µ –≤—Å–µ –∏–≥—Ä–æ–∫–∏ –æ—Ç–≤–µ—Ç–∏–ª–∏, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –∂–¥–∞—Ç—å
            enablePlayerInput();
          }
        }
      }, 1500);
    }
    
    updateDisplay();
  }

  function updatePlayerStatus(playerId) {
    const player = gameState.players.find(p => p.id === playerId);
    if (!player) return;
    
    const playerDiv = playersSection.querySelector(`[data-player="${playerId}"]`)?.closest('.player-controls');
    if (playerDiv) {
      const statusDiv = playerDiv.querySelector('.player-status');
      if (statusDiv) {
        // –î–ª—è –∏–≥—Ä–æ–∫–æ–≤ 1 –∏ 2 –¥–æ–±–∞–≤–ª—è–µ–º –∫–ª–∞—Å—Å flipped
        const flippedClass = player.id <= 2 ? ' flipped' : '';
        statusDiv.className = `player-status ${player.status}${flippedClass}`;
        statusDiv.textContent = getPlayerStatusText(player.status);
      }
      
      // –û—Ç–∫–ª—é—á–∞–µ–º –∫–Ω–æ–ø–∫–∏ –∏–≥—Ä–æ–∫–∞
      const playerBtns = playerDiv.querySelectorAll('.player-btn');
      playerBtns.forEach(btn => {
        btn.disabled = true;
      });
    }
  }

  function endGame() {
    console.log('endGame –≤—ã–∑–≤–∞–Ω–∞');
    gameState.isPlaying = false;
    gameState.gamePhase = 'finished';
    
    hideHUDCheckButton();
    
    let winner = null;
    let finalScore = gameState.level - 1; // –†–∞—É–Ω–¥, –Ω–∞ –∫–æ—Ç–æ—Ä–æ–º –æ—Å—Ç–∞–Ω–æ–≤–∏–ª–∞—Å—å –∏–≥—Ä–∞
    
    if (gameState.currentPlayers === 1) {
      updateHUDInfo('–ò–≥—Ä–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!');
      winner = { id: 1 };
    } else {
      winner = gameState.players.find(p => p.status === 'active');
      if (winner) {
        winner.status = 'winner';
        updatePlayerStatus(winner.id);
        updateHUDInfo(`–ü–æ–±–µ–¥–∏—Ç–µ–ª—å: –ò–≥—Ä–æ–∫ ${winner.id}!`);
      } else {
        updateHUDInfo('–í—Å–µ –∏–≥—Ä–æ–∫–∏ –≤—ã–±—ã–ª–∏!');
        // –ï—Å–ª–∏ –≤—Å–µ –≤—ã–±—ã–ª–∏, –ø–æ–±–µ–¥–∏—Ç–µ–ª—è –Ω–µ—Ç
        winner = null;
      }
    }
    
    console.log('–ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ:', { winner, finalScore });
    showEndModal(winner, finalScore);
  }

  // –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò
  function sleep(ms) {
    return new Promise(resolve => setTimeout(resolve, ms));
  }

  // –ó–ê–ü–£–°–ö –ò–ì–†–´
  document.addEventListener('DOMContentLoaded', initGame);
  
  // –ì–õ–û–ë–ê–õ–¨–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø –î–õ–Ø –ù–ê–í–ò–ì–ê–¶–ò–ò
  window.goToMenu = () => {
    window.location.href = '../../index.html';
  };
})();