// –°–ê–ú–û–õ–ï–¢–´ - –ø–æ–ª–Ω–æ—ç–∫—Ä–∞–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è
(() => {
  // –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø –ò–ì–†–´
  const GAME_CONFIG = {
    name: '–°–∞–º–æ–ª–µ—Ç—ã',
    icon: '‚úàÔ∏è',
    colors: [
      { name: 'red', value: '#FE112E', display: '–ö—Ä–∞—Å–Ω—ã–π' },
      { name: 'green', value: '#2ED573', display: '–ó–µ–ª—ë–Ω—ã–π' },
      { name: 'yellow', value: '#FFE23F', display: '–ñ—ë–ª—Ç—ã–π' },
      { name: 'blue', value: '#1E6FE3', display: '–°–∏–Ω–∏–π' }
    ],
    planeSpeed: 2, // –ø–∏–∫—Å–µ–ª–µ–π –∑–∞ –∫–∞–¥—Ä
    bulletSpeed: 4, // –ø–∏–∫—Å–µ–ª–µ–π –∑–∞ –∫–∞–¥—Ä (–≤ 2 —Ä–∞–∑–∞ –±—ã—Å—Ç—Ä–µ–µ —Å–∞–º–æ–ª–µ—Ç–∞)
    planeSize: 30,
    bulletSize: 6
  };

  // –°–û–°–¢–û–Ø–ù–ò–ï –ò–ì–†–´
  const gameState = {
    playersCount: 2,
    isPlaying: false,
    gamePhase: 'selecting', // 'selecting', 'playing', 'finished'
    planes: [],
    bullets: [],
    explosions: [],
    gameLoop: null,
    controls: {}
  };

  // DOM –≠–õ–ï–ú–ï–ù–¢–´
  let stage, gameField, controlsPanel;

  // –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø
  function initGame() {
    stage = document.getElementById('stage');
    if (!stage) return;
    
    createGameInterface();
    updateDisplay();
    bindEvents();
    showPlayersModal();
  }

  // –°–û–ó–î–ê–ù–ò–ï –ò–ù–¢–ï–†–§–ï–ô–°–ê
  function createGameInterface() {
    stage.innerHTML = `
      <div class="clouds" id="clouds">
        <div class="cloud cloud1"></div>
        <div class="cloud cloud2"></div>
        <div class="cloud cloud3"></div>
      </div>
      <div class="game-field" id="gameField" style="display: none;">
        <!-- –ò–≥—Ä–æ–≤—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã —Å–æ–∑–¥–∞—é—Ç—Å—è –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏ -->
      </div>
      <div class="controls-panel" id="controlsPanel" style="display: none;">
        <!-- –ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–æ–∑–¥–∞–µ—Ç—Å—è –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏ -->
      </div>
    `;
    
    gameField = document.getElementById('gameField');
    controlsPanel = document.getElementById('controlsPanel');
  }

  // –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò
  function updateDisplay() {
    const scoreTop = document.getElementById('scoreTop');
    const scoreBottom = document.getElementById('scoreBottom');
    if (scoreTop) scoreTop.textContent = `–ò–≥—Ä–æ–∫–æ–≤: ${gameState.playersCount}`;
    if (scoreBottom) scoreBottom.textContent = `–ò–≥—Ä–æ–∫–æ–≤: ${gameState.playersCount}`;
    
    if (!gameState.isPlaying) {
      const turnLabelTop = document.getElementById('turnLabelTop');
      const turnLabelBottom = document.getElementById('turnLabelBottom');
      if (turnLabelTop) turnLabelTop.textContent = `${GAME_CONFIG.icon} ${GAME_CONFIG.name}`;
      if (turnLabelBottom) turnLabelBottom.textContent = `${GAME_CONFIG.icon} ${GAME_CONFIG.name}`;
    }
  }

  function updateHUDInfo(text) {
    const turnLabelTop = document.getElementById('turnLabelTop');
    const turnLabelBottom = document.getElementById('turnLabelBottom');
    if (turnLabelTop) turnLabelTop.textContent = text;
    if (turnLabelBottom) turnLabelBottom.textContent = text;
  }

  function showHUDCheckButton() {
    // –ù–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ —ç—Ç–æ–π –∏–≥—Ä–µ
  }

  function hideHUDCheckButton() {
    // –ù–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ —ç—Ç–æ–π –∏–≥—Ä–µ
  }

  function resetGame() {
    gameState.isPlaying = false;
    gameState.gamePhase = 'selecting';
    gameState.planes = [];
    gameState.bullets = [];
    gameState.explosions = [];
    
    if (gameState.gameLoop) {
      clearInterval(gameState.gameLoop);
      gameState.gameLoop = null;
    }
    
    const modalBackdrop = document.getElementById('modalBackdrop');
    if (modalBackdrop) modalBackdrop.hidden = true;
    
    if (gameField) gameField.style.display = 'none';
    if (controlsPanel) controlsPanel.style.display = 'none';
    
    showPlayersModal();
    updateDisplay();
  }

  // –ú–û–î–ê–õ–¨–ù–´–ï –û–ö–ù–ê
  function showPlayersModal() {
    const modalBackdrop = document.getElementById('modalBackdrop');
    if (modalBackdrop) modalBackdrop.hidden = true;
    
    const playersModal = document.getElementById('playersModal');
    if (playersModal) playersModal.style.display = 'flex';
  }

  function hidePlayersModal() {
    const playersModal = document.getElementById('playersModal');
    if (playersModal) playersModal.style.display = 'none';
  }

  function showEndModal(winner) {
    const modalBackdrop = document.getElementById('modalBackdrop');
    const modalTitle = document.getElementById('modalTitle');
    const modalSubtitle = document.getElementById('modalSubtitle');
    
    if (modalBackdrop && modalTitle && modalSubtitle) {
      if (winner) {
        const colorName = GAME_CONFIG.colors[winner.colorIndex].display;
        modalTitle.textContent = '–ò–≥—Ä–∞ –æ–∫–æ–Ω—á–µ–Ω–∞!';
        modalSubtitle.textContent = `–ü–æ–±–µ–¥–∏—Ç–µ–ª—å: –ò–≥—Ä–æ–∫ ${winner.id} (${colorName})`;
      } else {
        modalTitle.textContent = '–ò–≥—Ä–∞ –æ–∫–æ–Ω—á–µ–Ω–∞!';
        modalSubtitle.textContent = '–ù–∏—á—å—è';
      }
      modalBackdrop.hidden = false;
    }
  }

  // –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –°–û–ë–´–¢–ò–ô
  function bindEvents() {
    // –í—ã–±–æ—Ä –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∏–≥—Ä–æ–∫–æ–≤
    const playerOptions = document.querySelectorAll('.difficulty-option');
    playerOptions.forEach(option => {
      option.addEventListener('click', (e) => {
        const players = parseInt(e.currentTarget.dataset.players);
        gameState.playersCount = players;
        hidePlayersModal();
        startGame();
      });
    });

    // –ö–Ω–æ–ø–∫–∏ HUD
    const btnNewTop = document.getElementById('btnNewTop');
    const btnNewBottom = document.getElementById('btnNewBottom');
    const btnBackTop = document.getElementById('btnBackTop');
    const btnBackBottom = document.getElementById('btnBackBottom');
    const btnRematch = document.getElementById('btnRematch');
    const btnToMenu = document.getElementById('btnToMenu');
    
    if (btnNewTop) btnNewTop.addEventListener('click', resetGame);
    if (btnNewBottom) btnNewBottom.addEventListener('click', resetGame);
    if (btnBackTop) btnBackTop.addEventListener('click', () => window.location.href = '../../index.html');
    if (btnBackBottom) btnBackBottom.addEventListener('click', () => window.location.href = '../../index.html');
    if (btnRematch) btnRematch.addEventListener('click', () => {
      const modalBackdrop = document.getElementById('modalBackdrop');
      if (modalBackdrop) modalBackdrop.hidden = true;
      resetGame();
    });
    if (btnToMenu) btnToMenu.addEventListener('click', () => window.location.href = '../../index.html');
  }

  // –ò–ì–†–û–í–ê–Ø –õ–û–ì–ò–ö–ê
  function startGame() {
    gameState.isPlaying = true;
    gameState.gamePhase = 'playing';
    
    createPlanes();
    createControls();
    startGameLoop();
    
    if (gameField) gameField.style.display = 'block';
    if (controlsPanel) controlsPanel.style.display = 'flex';
    
    updateDisplay();
    updateHUDInfo('–ò–≥—Ä–∞–π—Ç–µ!');
  }

  function createPlanes() {
    gameState.planes = [];
    const fieldRect = gameField.getBoundingClientRect();
    const fieldWidth = fieldRect.width;
    const fieldHeight = fieldRect.height;
    
    // –ü–æ–∑–∏—Ü–∏–∏ —Å–∞–º–æ–ª–µ—Ç–æ–≤ –≤ —É–≥–ª–∞—Ö
    const positions = [
      { x: 50, y: 50, angle: 45 }, // –í–µ—Ä—Ö–Ω–∏–π –ª–µ–≤—ã–π
      { x: fieldWidth - 50, y: 50, angle: 135 }, // –í–µ—Ä—Ö–Ω–∏–π –ø—Ä–∞–≤—ã–π
      { x: 50, y: fieldHeight - 50, angle: -45 }, // –ù–∏–∂–Ω–∏–π –ª–µ–≤—ã–π
      { x: fieldWidth - 50, y: fieldHeight - 50, angle: -135 } // –ù–∏–∂–Ω–∏–π –ø—Ä–∞–≤—ã–π
    ];
    
    for (let i = 0; i < gameState.playersCount; i++) {
      const plane = {
        id: i + 1,
        x: positions[i].x,
        y: positions[i].y,
        angle: positions[i].angle,
        colorIndex: i,
        isAlive: true,
        element: null
      };
      
      gameState.planes.push(plane);
      createPlaneElement(plane);
    }
  }

  function createPlaneElement(plane) {
    const planeElement = document.createElement('div');
    planeElement.className = `plane plane-${GAME_CONFIG.colors[plane.colorIndex].name}`;
    planeElement.style.left = plane.x + 'px';
    planeElement.style.top = plane.y + 'px';
    planeElement.style.transform = `rotate(${plane.angle}deg)`;
    
    gameField.appendChild(planeElement);
    plane.element = planeElement;
  }

  function createControls() {
    if (!controlsPanel) return;
    
    controlsPanel.innerHTML = '';
    
    for (let i = 0; i < gameState.playersCount; i++) {
      const controlGroup = document.createElement('div');
      controlGroup.className = 'control-group';
      
      const playerLabel = document.createElement('div');
      playerLabel.className = 'player-label';
      playerLabel.textContent = `–ò–≥—Ä–æ–∫ ${i + 1}`;
      playerLabel.style.color = GAME_CONFIG.colors[i].value;
      
      const controlButtons = document.createElement('div');
      controlButtons.className = 'control-buttons';
      
      const leftBtn = document.createElement('button');
      leftBtn.className = 'control-btn';
      leftBtn.textContent = '‚Üê';
      leftBtn.addEventListener('click', () => turnPlane(i, -15));
      
      const rightBtn = document.createElement('button');
      rightBtn.className = 'control-btn';
      rightBtn.textContent = '‚Üí';
      rightBtn.addEventListener('click', () => turnPlane(i, 15));
      
      const shootBtn = document.createElement('button');
      shootBtn.className = 'control-btn shoot';
      shootBtn.textContent = 'üí•';
      shootBtn.addEventListener('click', () => shootBullet(i));
      
      controlButtons.appendChild(leftBtn);
      controlButtons.appendChild(rightBtn);
      controlButtons.appendChild(shootBtn);
      
      controlGroup.appendChild(playerLabel);
      controlGroup.appendChild(controlButtons);
      controlsPanel.appendChild(controlGroup);
    }
  }

  function turnPlane(playerIndex, angleDelta) {
    const plane = gameState.planes[playerIndex];
    if (!plane || !plane.isAlive) return;
    
    plane.angle += angleDelta;
    plane.element.style.transform = `rotate(${plane.angle}deg)`;
  }

  function shootBullet(playerIndex) {
    const plane = gameState.planes[playerIndex];
    if (!plane || !plane.isAlive) return;
    
    const bullet = {
      x: plane.x + 15, // –¶–µ–Ω—Ç—Ä —Å–∞–º–æ–ª–µ—Ç–∞
      y: plane.y + 15,
      angle: plane.angle,
      colorIndex: plane.colorIndex,
      element: null
    };
    
    gameState.bullets.push(bullet);
    createBulletElement(bullet);
  }

  function createBulletElement(bullet) {
    const bulletElement = document.createElement('div');
    bulletElement.className = `bullet bullet-${GAME_CONFIG.colors[bullet.colorIndex].name}`;
    bulletElement.style.left = bullet.x + 'px';
    bulletElement.style.top = bullet.y + 'px';
    
    gameField.appendChild(bulletElement);
    bullet.element = bulletElement;
  }

  function startGameLoop() {
    gameState.gameLoop = setInterval(() => {
      updateGame();
    }, 16); // ~60 FPS
  }

  function updateGame() {
    updatePlanes();
    updateBullets();
    checkCollisions();
    checkGameEnd();
  }

  function updatePlanes() {
    const fieldRect = gameField.getBoundingClientRect();
    const fieldWidth = fieldRect.width;
    const fieldHeight = fieldRect.height;
    
    gameState.planes.forEach(plane => {
      if (!plane.isAlive) return;
      
      // –î–≤–∏–∂–µ–Ω–∏–µ –≤–ø–µ—Ä–µ–¥
      const radians = (plane.angle * Math.PI) / 180;
      plane.x += Math.cos(radians) * GAME_CONFIG.planeSpeed;
      plane.y += Math.sin(radians) * GAME_CONFIG.planeSpeed;
      
      // –¢–µ–ª–µ–ø–æ—Ä—Ç–∞—Ü–∏—è —á–µ—Ä–µ–∑ –∫—Ä–∞—è
      if (plane.x < 0) plane.x = fieldWidth;
      if (plane.x > fieldWidth) plane.x = 0;
      if (plane.y < 0) plane.y = fieldHeight;
      if (plane.y > fieldHeight) plane.y = 0;
      
      // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–∏ —ç–ª–µ–º–µ–Ω—Ç–∞
      plane.element.style.left = plane.x + 'px';
      plane.element.style.top = plane.y + 'px';
    });
  }

  function updateBullets() {
    const fieldRect = gameField.getBoundingClientRect();
    const fieldWidth = fieldRect.width;
    const fieldHeight = fieldRect.height;
    
    gameState.bullets = gameState.bullets.filter(bullet => {
      if (!bullet.element) return false;
      
      // –î–≤–∏–∂–µ–Ω–∏–µ –ø—É–ª–∏
      const radians = (bullet.angle * Math.PI) / 180;
      bullet.x += Math.cos(radians) * GAME_CONFIG.bulletSpeed;
      bullet.y += Math.sin(radians) * GAME_CONFIG.bulletSpeed;
      
      // –£–¥–∞–ª–µ–Ω–∏–µ –ø—É–ª–∏ –∑–∞ –ø—Ä–µ–¥–µ–ª–∞–º–∏ –ø–æ–ª—è
      if (bullet.x < 0 || bullet.x > fieldWidth || bullet.y < 0 || bullet.y > fieldHeight) {
        bullet.element.remove();
        return false;
      }
      
      // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–∏ —ç–ª–µ–º–µ–Ω—Ç–∞
      bullet.element.style.left = bullet.x + 'px';
      bullet.element.style.top = bullet.y + 'px';
      
      return true;
    });
  }

  function checkCollisions() {
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–æ–ª–∫–Ω–æ–≤–µ–Ω–∏–π –ø—É–ª—å —Å —Å–∞–º–æ–ª–µ—Ç–∞–º–∏
    gameState.bullets.forEach((bullet, bulletIndex) => {
      gameState.planes.forEach(plane => {
        if (!plane.isAlive || plane.colorIndex === bullet.colorIndex) return;
        
        const distance = Math.sqrt(
          Math.pow(bullet.x - plane.x, 2) + Math.pow(bullet.y - plane.y, 2)
        );
        
        if (distance < GAME_CONFIG.planeSize) {
          // –ü–æ–ø–∞–¥–∞–Ω–∏–µ!
          explodePlane(plane);
          bullet.element.remove();
          gameState.bullets.splice(bulletIndex, 1);
        }
      });
    });
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–æ–ª–∫–Ω–æ–≤–µ–Ω–∏–π —Å–∞–º–æ–ª–µ—Ç–æ–≤ –¥—Ä—É–≥ —Å –¥—Ä—É–≥–æ–º
    for (let i = 0; i < gameState.planes.length; i++) {
      for (let j = i + 1; j < gameState.planes.length; j++) {
        const plane1 = gameState.planes[i];
        const plane2 = gameState.planes[j];
        
        if (!plane1.isAlive || !plane2.isAlive) continue;
        
        const distance = Math.sqrt(
          Math.pow(plane1.x - plane2.x, 2) + Math.pow(plane1.y - plane2.y, 2)
        );
        
        if (distance < GAME_CONFIG.planeSize) {
          // –°—Ç–æ–ª–∫–Ω–æ–≤–µ–Ω–∏–µ!
          explodePlane(plane1);
          explodePlane(plane2);
        }
      }
    }
  }

  function explodePlane(plane) {
    plane.isAlive = false;
    
    // –°–æ–∑–¥–∞–Ω–∏–µ —ç—Ñ—Ñ–µ–∫—Ç–∞ –≤–∑—Ä—ã–≤–∞
    const explosion = document.createElement('div');
    explosion.className = 'explosion';
    explosion.style.left = (plane.x - 15) + 'px';
    explosion.style.top = (plane.y - 15) + 'px';
    
    gameField.appendChild(explosion);
    
    // –£–¥–∞–ª–µ–Ω–∏–µ —Å–∞–º–æ–ª–µ—Ç–∞
    plane.element.style.display = 'none';
    
    // –£–¥–∞–ª–µ–Ω–∏–µ —ç—Ñ—Ñ–µ–∫—Ç–∞ –≤–∑—Ä—ã–≤–∞ —á–µ—Ä–µ–∑ 500–º—Å
    setTimeout(() => {
      explosion.remove();
    }, 500);
  }

  function checkGameEnd() {
    const alivePlanes = gameState.planes.filter(plane => plane.isAlive);
    
    if (alivePlanes.length <= 1) {
      endGame(alivePlanes[0] || null);
    }
  }

  function endGame(winner) {
    gameState.isPlaying = false;
    gameState.gamePhase = 'finished';
    
    if (gameState.gameLoop) {
      clearInterval(gameState.gameLoop);
      gameState.gameLoop = null;
    }
    
    if (controlsPanel) controlsPanel.style.display = 'none';
    
    updateHUDInfo('–ò–≥—Ä–∞ –æ–∫–æ–Ω—á–µ–Ω–∞!');
    showEndModal(winner);
  }

  // –ó–ê–ü–£–°–ö –ò–ì–†–´
  document.addEventListener('DOMContentLoaded', initGame);
  
  // –ì–õ–û–ë–ê–õ–¨–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø –î–õ–Ø –ù–ê–í–ò–ì–ê–¶–ò–ò
  window.goToMenu = () => {
    window.location.href = '../../index.html';
  };
})();